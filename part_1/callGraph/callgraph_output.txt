--------------------------------------------------------------------------------
Profile data file 'callgrind.out.166332' (creator: callgrind-3.23.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 15482419
Trigger: Program termination
Profiled target:  ./graph_eulerian -v 1000 -e 10000 -s 31 (PID 166332, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
88,540,371 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                  file:function
--------------------------------------------------------------------------------
4,497,960 ( 5.08%)  /usr/src/debug/glibc/glibc/libio/fileops.c:_IO_file_xsputn@@GLIBC_2.2.5 [/usr/lib/libc.so.6]
3,816,370 ( 4.31%)  /usr/src/debug/glibc/glibc/libio/iofwrite.c:fwrite [/usr/lib/libc.so.6]
3,203,663 ( 3.62%)  /usr/src/debug/glibc/glibc/malloc/malloc.c:_int_malloc [/usr/lib/libc.so.6]
2,993,293 ( 3.38%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/locale_facets.tcc:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/libstdc++.so.6.0.33]
2,193,412 ( 2.48%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/locale_facets.tcc:int std::__int_to_char<char, unsigned long>(char*, unsigned long, char const*, std::_Ios_Fmtflags, bool) [/usr/lib/libstdc++.so.6.0.33]
1,880,328 ( 2.12%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/libstdc++.so.6.0.33]
1,659,060 ( 1.87%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&, unsigned long) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
1,623,356 ( 1.83%)  /usr/src/debug/glibc/glibc/malloc/malloc.c:_int_free [/usr/lib/libc.so.6]
1,517,078 ( 1.71%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc:std::ostream& std::ostream::_M_insert<long>(long) [/usr/lib/libstdc++.so.6.0.33]
1,421,344 ( 1.61%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, int>, false>*, unsigned long) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
1,406,242 ( 1.59%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
1,400,000 ( 1.58%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
1,379,310 ( 1.56%)  /usr/src/debug/glibc/glibc/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__mempcpy_avx_unaligned_erms [/usr/lib/libc.so.6]
1,360,000 ( 1.54%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
1,333,215 ( 1.51%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream_insert.h:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) [/usr/lib/libstdc++.so.6.0.33]
1,306,448 ( 1.48%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
1,152,112 ( 1.30%)  /usr/src/debug/glibc/glibc/libio/libioP.h:fwrite
1,146,441 ( 1.29%)  Graph.cpp:Graph::existsEdge(int, int) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
1,071,554 ( 1.21%)  /usr/include/c++/14.2.1/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  987,433 ( 1.12%)  /usr/src/debug/glibc/glibc/malloc/malloc.c:malloc [/usr/lib/libc.so.6]
  971,970 ( 1.10%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  967,019 ( 1.09%)  Graph.cpp:Graph::printGraph() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  952,424 ( 1.08%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::find(int const&) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  919,523 ( 1.04%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  902,044 ( 1.02%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/locale_facets.tcc:std::__use_cache<std::__numpunct_cache<char> >::operator()(std::locale const&) const [clone .isra.0] [/usr/lib/libstdc++.so.6.0.33]
  824,109 ( 0.93%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_key_equals(int const&, std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  821,060 ( 0.93%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(unsigned long, unsigned long) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  800,000 ( 0.90%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::_Scoped_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  743,357 ( 0.84%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  741,960 ( 0.84%)  /usr/src/debug/glibc/glibc/elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x
  741,478 ( 0.84%)  /usr/src/debug/glibc/glibc/elf/dl-lookup.c:do_lookup_x [/usr/lib/ld-linux-x86-64.so.2]
  734,877 ( 0.83%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  720,621 ( 0.81%)  /usr/include/c++/14.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_ptr() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  687,511 ( 0.78%)  /usr/include/c++/14.2.1/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  673,372 ( 0.76%)  main.cpp:generateRandomGraph(Graph&, int, int, unsigned int) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  669,508 ( 0.76%)  /usr/include/c++/14.2.1/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  656,172 ( 0.74%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, std::integral_constant<bool, true>) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  653,224 ( 0.74%)  /usr/include/c++/14.2.1/bits/functional_hash.h:std::hash<int>::operator()(int) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  640,000 ( 0.72%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  636,710 ( 0.72%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Select1st::__1st_type<std::pair<int const, int> const&>::type&& std::__detail::_Select1st::operator()<std::pair<int const, int> const&>(std::pair<int const, int> const&) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  622,320 ( 0.70%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<int const, int>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  614,901 ( 0.69%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_M_next() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  614,348 ( 0.69%)  /usr/src/debug/glibc/glibc/malloc/malloc.c:free [/usr/lib/libc.so.6]
  577,164 ( 0.65%)  /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::operator[](unsigned long) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  574,920 ( 0.65%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_node_allocator() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  574,742 ( 0.65%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  573,039 ( 0.65%)  /usr/include/c++/14.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_ptr() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  549,016 ( 0.62%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<int const, int>, false, false>::_Node_const_iterator(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  539,147 ( 0.61%)  /usr/src/debug/glibc/glibc/libio/fileops.c:new_do_write [/usr/lib/libc.so.6]
  528,380 ( 0.60%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  527,085 ( 0.60%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [/usr/lib/libstdc++.so.6.0.33]
  520,000 ( 0.59%)  /usr/include/c++/14.2.1/bits/alloc_traits.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)
  506,312 ( 0.57%)  /usr/src/debug/glibc/glibc/libio/fileops.c:_IO_file_overflow@@GLIBC_2.2.5 [/usr/lib/libc.so.6]
  500,000 ( 0.56%)  /usr/include/c++/14.2.1/bits/new_allocator.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)
  494,220 ( 0.56%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, int>, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, int>, false> const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  489,918 ( 0.55%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<int>, true>::_M_cget() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  480,414 ( 0.54%)  /usr/include/c++/14.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_addr() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  480,000 ( 0.54%)  /usr/include/c++/14.2.1/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  480,000 ( 0.54%)  /usr/include/c++/14.2.1/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  480,000 ( 0.54%)  /usr/include/c++/14.2.1/bits/move.h:std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  480,000 ( 0.54%)  /usr/include/c++/14.2.1/bits/new_allocator.h:std::__new_allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >::allocate(unsigned long, void const*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  435,100 ( 0.49%)  /usr/src/debug/glibc/glibc/string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2 [/usr/lib/libc.so.6]
  432,042 ( 0.49%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ext/stdio_sync_filebuf.h:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::xsputn(char const*, long) [/usr/lib/libstdc++.so.6.0.33]
  430,000 ( 0.49%)  Graph.cpp:Graph::addEdge(int, int) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  420,672 ( 0.48%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  418,114 ( 0.47%)  /usr/src/debug/glibc/glibc/libio/fileops.c:_IO_file_write@@GLIBC_2.2.5 [/usr/lib/libc.so.6]
  404,360 ( 0.46%)  /usr/include/c++/14.2.1/bits/uniform_int_dist.h:unsigned int std::uniform_int_distribution<int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  387,780 ( 0.44%)  /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/hashtable_c++0x.cc:std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const [/usr/lib/libstdc++.so.6.0.33]
  383,280 ( 0.43%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >, true>::_M_get() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  382,026 ( 0.43%)  /usr/include/c++/14.2.1/bits/move.h:std::pair<int const, int> const& std::forward<std::pair<int const, int> const&>(std::remove_reference<std::pair<int const, int> const&>::type&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  382,026 ( 0.43%)  /usr/include/c++/14.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_addr() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  380,000 ( 0.43%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  380,000 ( 0.43%)  /usr/include/c++/14.2.1/tuple:std::pair<int const, int>::pair<int const&, 0ul>(std::tuple<int const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  375,972 ( 0.42%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::end() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  369,029 ( 0.42%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/locale_facets.h:std::ostream& std::ostream::_M_insert<long>(long)
  360,000 ( 0.41%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_RehashStateGuard<std::__detail::_Prime_rehash_policy>::_RehashStateGuard(std::__detail::_Prime_rehash_policy&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  351,056 ( 0.40%)  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) [/usr/lib/libstdc++.so.6.0.33]
  341,173 ( 0.39%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<int const, int>, false, false>::operator*() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  330,390 ( 0.37%)  /usr/src/debug/glibc/glibc/libio/iofflush.c:fflush [/usr/lib/libc.so.6]
  330,180 ( 0.37%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc:std::ostream::flush() [/usr/lib/libstdc++.so.6.0.33]
  330,090 ( 0.37%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc:std::ostream::put(char) [/usr/lib/libstdc++.so.6.0.33]
  328,016 ( 0.37%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ios_base.h:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const
  328,016 ( 0.37%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc:std::ostream::operator<<(int) [/usr/lib/libstdc++.so.6.0.33]
  320,000 ( 0.36%)  /usr/include/c++/14.2.1/bits/new_allocator.h:std::__new_allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >::deallocate(std::__detail::_Hash_node<std::pair<int const, int>, false>*, unsigned long) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  289,756 ( 0.33%)  /usr/src/debug/glibc/glibc/elf/dl-lookup.c:_dl_lookup_symbol_x [/usr/lib/ld-linux-x86-64.so.2]
  287,014 ( 0.32%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/streambuf_iterator.h:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const
  287,000 ( 0.32%)  /usr/include/c++/14.2.1/new:operator new(unsigned long, void*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  283,052 ( 0.32%)  /usr/include/c++/14.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::a() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  280,000 ( 0.32%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, int>, false, false>::operator->() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  280,000 ( 0.32%)  /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::operator[](unsigned long) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  280,000 ( 0.32%)  /usr/include/c++/14.2.1/tuple:std::pair<int const, int>::pair<int const&>(std::piecewise_construct_t, std::tuple<int const&>, std::tuple<>) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  274,703 ( 0.31%)  /usr/include/c++/14.2.1/bits/stl_function.h:std::equal_to<int>::operator()(int const&, int const&) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  272,000 ( 0.31%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  262,834 ( 0.30%)  /usr/include/c++/14.2.1/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  260,897 ( 0.29%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<int const, int>, false>::_M_incr() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  260,000 ( 0.29%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, int>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  260,000 ( 0.29%)  /usr/include/c++/14.2.1/tuple:std::_Tuple_impl<0ul, int const&>::_Tuple_impl(int const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  260,000 ( 0.29%)  /usr/include/c++/14.2.1/tuple:std::tuple<int const&>::tuple(std::tuple<int const&>&&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  260,000 ( 0.29%)  /usr/include/c++/14.2.1/tuple:std::tuple<int const&>::tuple<true, true>(int const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  253,069 ( 0.29%)  /usr/src/debug/glibc/glibc/libio/putc.c:putc [/usr/lib/libc.so.6]
  246,912 ( 0.28%)  /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++98/locale.cc:std::locale::id::_M_id() const [/usr/lib/libstdc++.so.6.0.33]
  246,012 ( 0.28%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::ostream& std::ostream::_M_insert<long>(long)
  241,356 ( 0.27%)  /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::find(int const&) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  240,000 ( 0.27%)  /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::operator[](int const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  231,294 ( 0.26%)  /usr/src/debug/glibc/glibc/libio/fileops.c:_IO_file_sync@@GLIBC_2.2.5 [/usr/lib/libc.so.6]
  220,000 ( 0.25%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  220,000 ( 0.25%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_RehashStateGuard<std::__detail::_Prime_rehash_policy>::~_RehashStateGuard() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  220,000 ( 0.25%)  /usr/include/c++/14.2.1/tuple:std::_Tuple_impl<0ul, int const&>::_Tuple_impl(std::_Tuple_impl<0ul, int const&>&&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  218,872 ( 0.25%)  /usr/src/debug/glibc/glibc/elf/dl-reloc.c:_dl_relocate_object [/usr/lib/ld-linux-x86-64.so.2]
  205,016 ( 0.23%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_ios.h:std::ostream& std::ostream::_M_insert<long>(long)
  200,690 ( 0.23%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<int const, int>, false, false>::operator++() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  200,000 ( 0.23%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_Hash_node() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  200,000 ( 0.23%)  /usr/include/c++/14.2.1/tuple:std::_Head_base<0ul, int const&, false>::_Head_base(int const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  190,179 ( 0.21%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_eq() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  190,044 ( 0.21%)  /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::end() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  188,033 ( 0.21%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_ios.h:std::ostream::sentry::sentry(std::ostream&)
  186,030 ( 0.21%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)
  180,621 ( 0.20%)  /usr/include/c++/14.2.1/bits/stl_pair.h:std::tuple_element<0ul, std::pair<int const, int> >::type const& std::get<0ul, int const, int>(std::pair<int const, int> const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  180,621 ( 0.20%)  /usr/include/c++/14.2.1/bits/stl_pair.h:std::tuple_element<1ul, std::pair<int const, int> >::type const& std::get<1ul, int const, int>(std::pair<int const, int> const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  180,000 ( 0.20%)  /usr/include/c++/14.2.1/bits/move.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::addressof<std::__detail::_Hash_node<std::pair<int const, int>, false> >(std::__detail::_Hash_node<std::pair<int const, int>, false>&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  180,000 ( 0.20%)  /usr/include/c++/14.2.1/bits/ptr_traits.h:std::__ptr_traits_ptr_to<std::__detail::_Hash_node<std::pair<int const, int>, false>*, std::__detail::_Hash_node<std::pair<int const, int>, false>, false>::pointer_to(std::__detail::_Hash_node<std::pair<int const, int>, false>&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  180,000 ( 0.20%)  /usr/include/c++/14.2.1/tuple:int const& std::__get_helper<0ul, int const&>(std::_Tuple_impl<0ul, int const&>&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  180,000 ( 0.20%)  /usr/include/c++/14.2.1/tuple:std::_Tuple_impl<0ul, int const&>::_M_head(std::_Tuple_impl<0ul, int const&>&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  180,000 ( 0.20%)  /usr/include/c++/14.2.1/tuple:std::tuple_element<0ul, std::tuple<int const&> >::type& std::get<0ul, int const&>(std::tuple<int const&>&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  176,053 ( 0.20%)  /usr/src/debug/glibc/glibc/libio/fileops.c:_IO_do_write@@GLIBC_2.2.5 [/usr/lib/libc.so.6]
  176,048 ( 0.20%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&) [/usr/lib/libstdc++.so.6.0.33]
  168,788 ( 0.19%)  /usr/src/debug/glibc/glibc/elf/dl-lookup.c:check_match [/usr/lib/ld-linux-x86-64.so.2]
  168,000 ( 0.19%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  165,195 ( 0.19%)  /usr/src/debug/glibc/glibc/libio/libioP.h:fflush
  164,008 ( 0.19%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/streambuf:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const
  160,000 ( 0.18%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node_code_cache<false>&, unsigned long) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  147,917 ( 0.17%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_S_equals(unsigned long, std::__detail::_Hash_node_code_cache<false> const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  143,039 ( 0.16%)  /usr/src/debug/glibc/glibc/libio/genops.c:__overflow [/usr/lib/libc.so.6]
  141,526 ( 0.16%)  /usr/include/c++/14.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::b() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  141,180 ( 0.16%)  /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  140,791 ( 0.16%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::size() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  140,483 ( 0.16%)  /usr/include/c++/14.2.1/bits/stl_pair.h:int const& std::__pair_get<1ul>::__const_get<int const, int>(std::pair<int const, int> const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  140,000 ( 0.16%)  /usr/include/c++/14.2.1/bits/alloc_traits.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<int const, int>, false>*)
  140,000 ( 0.16%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_M_state() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  140,000 ( 0.16%)  /usr/include/c++/14.2.1/tuple:std::_Head_base<0ul, int const&, false>::_M_head(std::_Head_base<0ul, int const&, false>&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  126,787 ( 0.14%)  /usr/src/debug/glibc/glibc/elf/do-rel.h:_dl_relocate_object
  126,786 ( 0.14%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<int>, true>::_M_cget() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  124,020 ( 0.14%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/streambuf:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)
  123,006 ( 0.14%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ios_base.h:std::ostream::operator<<(int)
  123,006 ( 0.14%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/locale_facets.h:std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/libstdc++.so.6.0.33]
  120,414 ( 0.14%)  /usr/include/c++/14.2.1/bits/stl_pair.h:int const& std::__pair_get<0ul>::__const_get<int const, int>(std::pair<int const, int> const&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  120,000 ( 0.14%)  /usr/include/c++/14.2.1/bits/move.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  120,000 ( 0.14%)  /usr/include/c++/14.2.1/bits/move.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::__addressof<std::__detail::_Hash_node<std::pair<int const, int>, false> >(std::__detail::_Hash_node<std::pair<int const, int>, false>&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  120,000 ( 0.14%)  /usr/include/c++/14.2.1/bits/move.h:std::__detail::_Prime_rehash_policy* std::__addressof<std::__detail::_Prime_rehash_policy>(std::__detail::_Prime_rehash_policy&) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  120,000 ( 0.14%)  /usr/include/c++/14.2.1/bits/ptr_traits.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::__to_address<std::__detail::_Hash_node<std::pair<int const, int>, false> >(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  115,844 ( 0.13%)  /usr/src/debug/glibc/glibc/string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S:strcmp [/usr/lib/ld-linux-x86-64.so.2]
  100,565 ( 0.11%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::__small_size_threshold() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
  100,565 ( 0.11%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_hash_traits<std::hash<int> >::__small_size_threshold() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
   93,015 ( 0.11%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/char_traits.h:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
   93,015 ( 0.11%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ios_base.h:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)
   88,024 ( 0.10%)  /usr/src/debug/glibc/glibc/io/../sysdeps/unix/sysv/linux/write.c:write [/usr/lib/libc.so.6]
   80,952 ( 0.09%)  /usr/src/debug/glibc/glibc/malloc/malloc.c:alloc_perturb [/usr/lib/libc.so.6]
   77,480 ( 0.09%)  /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/hashtable_c++0x.cc:std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const [/usr/lib/libstdc++.so.6.0.33]
   77,021 ( 0.09%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ext/stdio_sync_filebuf.h:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::overflow(int) [/usr/lib/libstdc++.so.6.0.33]
   69,479 ( 0.08%)  /usr/src/debug/glibc/glibc/string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms [/usr/lib/libc.so.6]
   67,904 ( 0.08%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_allocate_buckets(unsigned long) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
   66,043 ( 0.07%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::ostream::flush()
   66,018 ( 0.07%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::ostream::put(char)
   65,823 ( 0.07%)  /usr/src/debug/glibc/glibc/malloc/arena.c:free
   64,996 ( 0.07%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/stl_algobase.h:std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const
   58,680 ( 0.07%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
   55,015 ( 0.06%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/streambuf:std::ostream::put(char)
   55,015 ( 0.06%)  /usr/src/debug/glibc/glibc/libio/libioP.h:__overflow
   55,015 ( 0.06%)  /usr/src/debug/glibc/glibc/libio/libioP.h:new_do_write
   48,500 ( 0.05%)  /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
   48,367 ( 0.05%)  /usr/src/debug/glibc/glibc/malloc/malloc.c:_int_free_merge_chunk [/usr/lib/libc.so.6]
   46,560 ( 0.05%)  /usr/include/c++/14.2.1/bits/new_allocator.h:std::__new_allocator<std::__detail::_Hash_node_base*>::allocate(unsigned long, void const*) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
   44,100 ( 0.05%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets() [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
   43,882 ( 0.05%)  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_op.cc:operator delete(void*) [/usr/lib/libstdc++.so.6.0.33]
   43,882 ( 0.05%)  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) [/usr/lib/libstdc++.so.6.0.33]
   43,843 ( 0.05%)  /usr/src/debug/glibc/glibc/malloc/arena.c:malloc
   41,002 ( 0.05%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/streambuf_iterator.h:std::ostream& std::ostream::_M_insert<long>(long)
   39,567 ( 0.04%)  /usr/src/debug/glibc/glibc/malloc/malloc.c:unlink_chunk.isra.0 [/usr/lib/libc.so.6]
   38,220 ( 0.04%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
   34,920 ( 0.04%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_allocate_buckets(unsigned long) [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
   34,601 ( 0.04%)  /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const [/home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/graph_eulerian]
   34,372 ( 0.04%)  /usr/src/debug/glibc/glibc/malloc/malloc.c:_int_free_create_chunk [/usr/lib/libc.so.6]
   33,488 ( 0.04%)  /usr/src/debug/glibc/glibc/malloc/malloc.c:malloc_consolidate [/usr/lib/libc.so.6]
   33,024 ( 0.04%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ext/stdio_sync_filebuf.h:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::sync() [/usr/lib/libstdc++.so.6.0.33]
   33,019 ( 0.04%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_ios.h:std::ostream::flush()
   33,009 ( 0.04%)  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/locale_facets.h:std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/functional_hash.h
--------------------------------------------------------------------------------
Ir               

-- line 146 ----------------------------------------
      .           
      .             /// Explicit specialization for char32_t.
      .             _Cxx_hashtable_define_trivial_hash(char32_t)
      .           
      .             /// Explicit specialization for short.
      .             _Cxx_hashtable_define_trivial_hash(short)
      .           
      .             /// Explicit specialization for int.
653,224 ( 0.74%)    _Cxx_hashtable_define_trivial_hash(int)
      .           
      .             /// Explicit specialization for long.
      .             _Cxx_hashtable_define_trivial_hash(long)
      .           
      .             /// Explicit specialization for long long.
      .             _Cxx_hashtable_define_trivial_hash(long long)
      .           
      .             /// Explicit specialization for unsigned short.
-- line 162 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/unordered_map.h
--------------------------------------------------------------------------------
Ir               

-- line 101 ----------------------------------------
      .              *
      .              *  Base is _Hashtable, dispatched at compile time via template
      .              *  alias __umap_hashtable.
      .              */
      .             template<typename _Key, typename _Tp,
      .           	   typename _Hash = hash<_Key>,
      .           	   typename _Pred = equal_to<_Key>,
      .           	   typename _Alloc = allocator<std::pair<const _Key, _Tp>>>
 10,000 ( 0.01%)      class unordered_map
5,945,096 ( 6.71%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable() (1,000x)
      .               {
      .                 typedef __umap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable;
      .                 _Hashtable _M_h;
      .           
      .               public:
      .                 // typedefs:
      .                 ///@{
      .                 /// Public typedefs.
-- line 117 ----------------------------------------
-- line 140 ----------------------------------------
      .           #if __cplusplus > 201402L
      .                 using node_type = typename _Hashtable::node_type;
      .                 using insert_return_type = typename _Hashtable::insert_return_type;
      .           #endif
      .           
      .                 //construct/destroy/copy
      .           
      .                 /// Default constructor.
 10,000 ( 0.01%)        unordered_map() = default;
110,000 ( 0.12%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable() (1,000x)
      .           
      .                 /**
      .                  *  @brief  Default constructor creates no elements.
      .                  *  @param __n  Minimal initial number of buckets.
      .                  *  @param __hf  A hash functor.
      .                  *  @param __eql  A key equality functor.
      .                  *  @param __a  An allocator object.
      .                  */
-- line 156 ----------------------------------------
-- line 333 ----------------------------------------
      .                 { return _M_h.begin(); }
      .           
      .                 ///@{
      .                 /**
      .                  *  Returns a read-only (constant) iterator that points to the first
      .                  *  element in the %unordered_map.
      .                  */
      .                 const_iterator
  4,012 ( 0.00%)        begin() const noexcept
  5,015 ( 0.01%)        { return _M_h.begin(); }
 51,153 ( 0.06%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::begin() const (1,003x)
      .           
      .                 const_iterator
      .                 cbegin() const noexcept
      .                 { return _M_h.begin(); }
      .                 ///@}
      .           
      .                 /**
      .                  *  Returns a read/write iterator that points one past the last element in
-- line 350 ----------------------------------------
-- line 355 ----------------------------------------
      .                 { return _M_h.end(); }
      .           
      .                 ///@{
      .                 /**
      .                  *  Returns a read-only (constant) iterator that points one past the last
      .                  *  element in the %unordered_map.
      .                  */
      .                 const_iterator
 84,464 ( 0.10%)        end() const noexcept
105,580 ( 0.12%)        { return _M_h.end(); }
844,640 ( 0.95%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::end() const (21,116x)
      .           
      .                 const_iterator
      .                 cend() const noexcept
      .                 { return _M_h.end(); }
      .                 ///@}
      .           
      .                 // modifiers.
      .           
-- line 372 ----------------------------------------
-- line 879 ----------------------------------------
      .           #if __cplusplus > 201703L
      .                 template<typename _Kt>
      .           	auto
      .           	find(const _Kt& __x) -> decltype(_M_h._M_find_tr(__x))
      .           	{ return _M_h._M_find_tr(__x); }
      .           #endif
      .           
      .                 const_iterator
100,565 ( 0.11%)        find(const key_type& __x) const
140,791 ( 0.16%)        { return _M_h.find(__x); }
7,163,540 ( 8.09%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::find(int const&) const (20,113x)
      .           
      .           #if __cplusplus > 201703L
      .                 template<typename _Kt>
      .           	auto
      .           	find(const _Kt& __x) const -> decltype(_M_h._M_find_tr(__x))
      .           	{ return _M_h._M_find_tr(__x); }
      .           #endif
      .                 ///@}
-- line 896 ----------------------------------------
-- line 979 ----------------------------------------
      .                  *  Allows for easy lookup with the subscript ( @c [] )operator.  Returns
      .                  *  data associated with the key specified in subscript.  If the key does
      .                  *  not exist, a pair with that key is created using default values, which
      .                  *  is then returned.
      .                  *
      .                  *  Lookup requires constant time.
      .                  */
      .                 mapped_type&
100,000 ( 0.11%)        operator[](const key_type& __k)
140,000 ( 0.16%)        { return _M_h[__k]; }
30,441,504 (34.38%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&) (20,000x)
      .           
      .                 mapped_type&
      .                 operator[](key_type&& __k)
      .                 { return _M_h[std::move(__k)]; }
      .                 ///@}
      .           
      .                 ///@{
      .                 /**
-- line 996 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir               

-- line 96 ----------------------------------------
      .                 /** Parameter type. */
      .                 struct param_type
      .                 {
      .           	typedef uniform_int_distribution<_IntType> distribution_type;
      .           
      .           	param_type() : param_type(0) { }
      .           
      .           	explicit
      5 ( 0.00%)  	param_type(_IntType __a,
      .           		   _IntType __b = __gnu_cxx::__int_traits<_IntType>::__max)
      6 ( 0.00%)  	: _M_a(__a), _M_b(__b)
      .           	{
      2 ( 0.00%)  	  __glibcxx_assert(_M_a <= _M_b);
      3 ( 0.00%)  	}
      .           
      .           	result_type
121,308 ( 0.14%)  	a() const
161,744 ( 0.18%)  	{ return _M_a; }
      .           
      .           	result_type
 60,654 ( 0.07%)  	b() const
 80,872 ( 0.09%)  	{ return _M_b; }
      .           
      .           	friend bool
      .           	operator==(const param_type& __p1, const param_type& __p2)
      .           	{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }
      .           
      .           	friend bool
      .           	operator!=(const param_type& __p1, const param_type& __p2)
      .           	{ return !(__p1 == __p2); }
-- line 125 ----------------------------------------
-- line 134 ----------------------------------------
      .                  * @brief Constructs a uniform distribution object.
      .                  */
      .                 uniform_int_distribution() : uniform_int_distribution(0) { }
      .           
      .                 /**
      .                  * @brief Constructs a uniform distribution object.
      .                  */
      .                 explicit
      6 ( 0.00%)        uniform_int_distribution(_IntType __a,
      .           			       _IntType __b
      .           				 = __gnu_cxx::__int_traits<_IntType>::__max)
      6 ( 0.00%)        : _M_param(__a, __b)
     17 ( 0.00%)  => /usr/include/c++/14.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::param_type(int, int) (1x)
      3 ( 0.00%)        { }
      .           
      .                 explicit
      .                 uniform_int_distribution(const param_type& __p)
      .                 : _M_param(__p)
      .                 { }
      .           
      .                 /**
      .                  * @brief Resets the distribution state.
-- line 154 ----------------------------------------
-- line 195 ----------------------------------------
      .                 max() const
      .                 { return this->b(); }
      .           
      .                 /**
      .                  * @brief Generating functions.
      .                  */
      .                 template<typename _UniformRandomBitGenerator>
      .           	result_type
101,090 ( 0.11%)  	operator()(_UniformRandomBitGenerator& __urng)
161,744 ( 0.18%)          { return this->operator()(__urng, _M_param); }
3,257,511 ( 3.68%)  => /usr/include/c++/14.2.1/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&) (20,218x)
      .           
      .                 template<typename _UniformRandomBitGenerator>
      .           	result_type
      .           	operator()(_UniformRandomBitGenerator& __urng,
      .           		   const param_type& __p);
      .           
      .                 template<typename _ForwardIterator,
      .           	       typename _UniformRandomBitGenerator>
-- line 212 ----------------------------------------
-- line 249 ----------------------------------------
      .           
      .                 param_type _M_param;
      .           
      .                 // Lemire's nearly divisionless algorithm.
      .                 // Returns an unbiased random number from __g downscaled to [0,__range)
      .                 // using an unsigned type _Wp twice as wide as unsigned type _Up.
      .                 template<typename _Wp, typename _Urbg, typename _Up>
      .           	static _Up
101,090 ( 0.11%)  	_S_nd(_Urbg& __g, _Up __range)
      .           	{
      .           	  using _Up_traits = __gnu_cxx::__int_traits<_Up>;
      .           	  using _Wp_traits = __gnu_cxx::__int_traits<_Wp>;
      .           	  static_assert(!_Up_traits::__is_signed, "U must be unsigned");
      .           	  static_assert(!_Wp_traits::__is_signed, "W must be unsigned");
      .           	  static_assert(_Wp_traits::__digits == (2 * _Up_traits::__digits),
      .           			"W must be twice as wide as U");
      .           
      .           	  // reference: Fast Random Integer Generation in an Interval
      .           	  // ACM Transactions on Modeling and Computer Simulation 29 (1), 2019
      .           	  // https://arxiv.org/abs/1805.10941
121,308 ( 0.14%)  	  _Wp __product = _Wp(__g()) * _Wp(__range);
1,357,019 ( 1.53%)  => /usr/include/c++/14.2.1/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()() (20,218x)
 40,436 ( 0.05%)  	  _Up __low = _Up(__product);
 60,654 ( 0.07%)  	  if (__low < __range)
      .           	    {
      .           	      _Up __threshold = -__range % __range;
      .           	      while (__low < __threshold)
      .           		{
      .           		  __product = _Wp(__g()) * _Wp(__range);
      .           		  __low = _Up(__product);
      .           		}
      .           	    }
 40,436 ( 0.05%)  	  return __product >> _Up_traits::__digits;
 40,436 ( 0.05%)  	}
      .               };
      .           
      .             template<typename _IntType>
      .               template<typename _UniformRandomBitGenerator>
      .                 typename uniform_int_distribution<_IntType>::result_type
202,180 ( 0.23%)        uniform_int_distribution<_IntType>::
      .                 operator()(_UniformRandomBitGenerator& __urng,
      .           		 const param_type& __param)
      .                 {
      .           	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
      .           	typedef typename make_unsigned<result_type>::type __utype;
      .           	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
      .           
 20,218 ( 0.02%)  	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
 40,436 ( 0.05%)  	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
      .           	static_assert( __urngmin < __urngmax,
      .           	    "Uniform random bit generator must define min() < max()");
 20,218 ( 0.02%)  	constexpr __uctype __urngrange = __urngmax - __urngmin;
      .           
 60,654 ( 0.07%)  	const __uctype __urange
161,744 ( 0.18%)  	  = __uctype(__param.b()) - __uctype(__param.a());
141,526 ( 0.16%)  => /usr/include/c++/14.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::a() const (20,218x)
141,526 ( 0.16%)  => /usr/include/c++/14.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::b() const (20,218x)
      .           
      .           	__uctype __ret;
 60,654 ( 0.07%)  	if (__urngrange > __urange)
      .           	  {
      .           	    // downscaling
      .           
 60,654 ( 0.07%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
      .           
      .           #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
      .           #if __SIZEOF_INT128__
      .           	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
      .           	      {
      .           		// __urng produces values that use exactly 64-bits,
      .           		// so use 128-bit integers to downscale to desired range.
      .           		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 319 ----------------------------------------
      .           							       __u64erange);
      .           	      }
      .           	    else
      .           #endif
      .           	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT32_MAX__)
      .           	      {
      .           		// __urng produces values that use exactly 32-bits,
      .           		// so use 64-bit integers to downscale to desired range.
 40,436 ( 0.05%)  		__UINT32_TYPE__ __u32erange = __uerange;
161,744 ( 0.18%)  		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
1,761,379 ( 1.99%)  => /usr/include/c++/14.2.1/bits/uniform_int_dist.h:unsigned int std::uniform_int_distribution<int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int) (20,218x)
      .           	      }
      .           	    else
      .           #endif
      .           	      {
      .           		// fallback case (2 divisions)
      .           		const __uctype __scaling = __urngrange / __uerange;
      .           		const __uctype __past = __uerange * __scaling;
      .           		do
-- line 336 ----------------------------------------
-- line 364 ----------------------------------------
      .           			 (__urng, param_type(0, __urange / __uerngrange)));
      .           		__ret = __tmp + (__uctype(__urng()) - __urngmin);
      .           	      }
      .           	    while (__ret > __urange || __ret < __tmp);
      .           	  }
      .           	else
      .           	  __ret = __uctype(__urng()) - __urngmin;
      .           
121,308 ( 0.14%)  	return __ret + __param.a();
141,526 ( 0.16%)  => /usr/include/c++/14.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::a() const (20,218x)
121,308 ( 0.14%)        }
      .           
      .           
      .             template<typename _IntType>
      .               template<typename _ForwardIterator,
      .           	     typename _UniformRandomBitGenerator>
      .                 void
      .                 uniform_int_distribution<_IntType>::
      .                 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/tuple
--------------------------------------------------------------------------------
Ir               

-- line 193 ----------------------------------------
      .           #endif
      .           
      .             template<size_t _Idx, typename _Head>
      .               struct _Head_base<_Idx, _Head, false>
      .               {
      .                 constexpr _Head_base()
      .                 : _M_head_impl() { }
      .           
 80,000 ( 0.09%)        constexpr _Head_base(const _Head& __h)
120,000 ( 0.14%)        : _M_head_impl(__h) { }
      .           
      .                 constexpr _Head_base(const _Head_base&) = default;
      .                 constexpr _Head_base(_Head_base&&) = default;
      .           
      .                 template<typename _UHead>
      .                   constexpr _Head_base(_UHead&& __h)
      .           	: _M_head_impl(std::forward<_UHead>(__h)) { }
      .           
-- line 210 ----------------------------------------
-- line 234 ----------------------------------------
      .           	{ }
      .           
      .                 template<typename _Alloc, typename _UHead>
      .           	_GLIBCXX20_CONSTEXPR
      .           	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
      .           	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
      .           
      .                 static constexpr _Head&
140,000 ( 0.16%)        _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
      .           
      .                 static constexpr const _Head&
      .                 _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
      .           
      .                 _Head _M_head_impl;
      .               };
      .           
      .           #if __cpp_lib_tuple_like // >= C++23
-- line 250 ----------------------------------------
-- line 548 ----------------------------------------
      .               struct _Tuple_impl<_Idx, _Head>
      .               : private _Head_base<_Idx, _Head>
      .               {
      .                 template<size_t, typename...> friend struct _Tuple_impl;
      .           
      .                 typedef _Head_base<_Idx, _Head> _Base;
      .           
      .                 static constexpr _Head&
180,000 ( 0.20%)        _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
140,000 ( 0.16%)  => /usr/include/c++/14.2.1/tuple:std::_Head_base<0ul, int const&, false>::_M_head(std::_Head_base<0ul, int const&, false>&) (20,000x)
      .           
      .                 static constexpr const _Head&
      .                 _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
      .           
      .                 constexpr
      .                 _Tuple_impl()
      .                 : _Base() { }
      .           
      .                 explicit constexpr
100,000 ( 0.11%)        _Tuple_impl(const _Head& __head)
100,000 ( 0.11%)        : _Base(__head)
200,000 ( 0.23%)  => /usr/include/c++/14.2.1/tuple:std::_Head_base<0ul, int const&, false>::_Head_base(int const&) (20,000x)
 60,000 ( 0.07%)        { }
      .           
      .                 template<typename _UHead>
      .           	explicit constexpr
      .           	_Tuple_impl(_UHead&& __head)
      .           	: _Base(std::forward<_UHead>(__head))
      .           	{ }
      .           
      .                 constexpr _Tuple_impl(const _Tuple_impl&) = default;
-- line 576 ----------------------------------------
-- line 578 ----------------------------------------
      .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
      .                 // 2729. Missing SFINAE on std::pair::operator=
      .                 _Tuple_impl& operator=(const _Tuple_impl&) = delete;
      .           
      .           #if _GLIBCXX_INLINE_VERSION
      .                 _Tuple_impl(_Tuple_impl&&) = default;
      .           #else
      .                 constexpr
 80,000 ( 0.09%)        _Tuple_impl(_Tuple_impl&& __in)
      .                 noexcept(is_nothrow_move_constructible<_Head>::value)
 80,000 ( 0.09%)        : _Base(static_cast<_Base&&>(__in))
 60,000 ( 0.07%)        { }
      .           #endif
      .           
      .                 template<typename _UHead>
      .           	constexpr
      .           	_Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
      .           	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))
      .           	{ }
      .           
-- line 597 ----------------------------------------
-- line 1464 ----------------------------------------
      .           	explicit constexpr
      .           	tuple()
      .           	noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)
      .           	: _Inherited() { }
      .           
      .                 template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
      .           	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
      .           	constexpr
100,000 ( 0.11%)  	tuple(const _Elements&... __elements)
      .           	noexcept(__nothrow_constructible<const _Elements&...>())
160,000 ( 0.18%)  	: _Inherited(__elements...) { }
460,000 ( 0.52%)  => /usr/include/c++/14.2.1/tuple:std::_Tuple_impl<0ul, int const&>::_Tuple_impl(int const&) (20,000x)
      .           
      .                 template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
      .           	       _ExplicitCtor<_NotEmpty, const _Elements&...> = false>
      .           	explicit constexpr
      .           	tuple(const _Elements&... __elements)
      .           	noexcept(__nothrow_constructible<const _Elements&...>())
      .           	: _Inherited(__elements...) { }
      .           
-- line 1482 ----------------------------------------
-- line 1495 ----------------------------------------
      .           	explicit constexpr
      .           	tuple(_UElements&&... __elements)
      .           	noexcept(__nothrow_constructible<_UElements...>())
      .           	: _Inherited(std::forward<_UElements>(__elements)...)
      .           	{ __glibcxx_no_dangling_refs(_UElements&&); }
      .           
      .                 constexpr tuple(const tuple&) = default;
      .           
260,000 ( 0.29%)        constexpr tuple(tuple&&) = default;
220,000 ( 0.25%)  => /usr/include/c++/14.2.1/tuple:std::_Tuple_impl<0ul, int const&>::_Tuple_impl(std::_Tuple_impl<0ul, int const&>&&) (20,000x)
      .           
      .                 template<typename... _UElements,
      .           	       bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
      .           			   && !__use_other_ctor<const tuple<_UElements...>&>(),
      .           	       _ImplicitCtor<_Valid, const _UElements&...> = true>
      .           	constexpr
      .           	tuple(const tuple<_UElements...>& __in)
      .           	noexcept(__nothrow_constructible<const _UElements&...>())
-- line 1511 ----------------------------------------
-- line 2419 ----------------------------------------
      .               {
      .                 static_assert(__i < sizeof...(_Types), "tuple index must be in range");
      .           
      .                 using type = typename _Nth_type<__i, _Types...>::type;
      .               };
      .           
      .             template<size_t __i, typename _Head, typename... _Tail>
      .               constexpr _Head&
 80,000 ( 0.09%)      __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
100,000 ( 0.11%)      { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
320,000 ( 0.36%)  => /usr/include/c++/14.2.1/tuple:std::_Tuple_impl<0ul, int const&>::_M_head(std::_Tuple_impl<0ul, int const&>&) (20,000x)
      .           
      .             template<size_t __i, typename _Head, typename... _Tail>
      .               constexpr const _Head&
      .               __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
      .               { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
      .           
      .             // Deleted overload to improve diagnostics for invalid indices
      .             template<size_t __i, typename... _Types>
      .               __enable_if_t<(__i >= sizeof...(_Types))>
      .               __get_helper(const tuple<_Types...>&) = delete;
      .           
      .             /// Return a reference to the ith element of a tuple.
      .             template<size_t __i, typename... _Elements>
      .               constexpr __tuple_element_t<__i, tuple<_Elements...>>&
 80,000 ( 0.09%)      get(tuple<_Elements...>& __t) noexcept
100,000 ( 0.11%)      { return std::__get_helper<__i>(__t); }
500,000 ( 0.56%)  => /usr/include/c++/14.2.1/tuple:int const& std::__get_helper<0ul, int const&>(std::_Tuple_impl<0ul, int const&>&) (20,000x)
      .           
      .             /// Return a const reference to the ith element of a const tuple.
      .             template<size_t __i, typename... _Elements>
      .               constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
      .               get(const tuple<_Elements...>& __t) noexcept
      .               { return std::__get_helper<__i>(__t); }
      .           
      .             /// Return an rvalue reference to the ith element of a tuple rvalue.
-- line 2452 ----------------------------------------
-- line 2864 ----------------------------------------
      .              *
      .              * The elements of each tuple will be used as the constructor arguments
      .              * for the data members of the pair.
      .             */
      .             template<class _T1, class _T2>
      .               template<typename... _Args1, typename... _Args2>
      .                 _GLIBCXX20_CONSTEXPR
      .                 inline
100,000 ( 0.11%)        pair<_T1, _T2>::
      .                 pair(piecewise_construct_t,
      .           	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      .                 : pair(__first, __second,
      .           	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
120,000 ( 0.14%)  	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
1,180,000 ( 1.33%)  => /usr/include/c++/14.2.1/tuple:std::pair<int const, int>::pair<int const&, 0ul>(std::tuple<int const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>) (20,000x)
 60,000 ( 0.07%)        { }
      .           
      .             template<class _T1, class _T2>
      .               template<typename... _Args1, size_t... _Indexes1,
      .           	     typename... _Args2, size_t... _Indexes2>
      .                 _GLIBCXX20_CONSTEXPR inline
120,000 ( 0.14%)        pair<_T1, _T2>::
      .                 pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
      .           	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
160,000 ( 0.18%)        : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
680,000 ( 0.77%)  => /usr/include/c++/14.2.1/tuple:std::tuple_element<0ul, std::tuple<int const&> >::type& std::get<0ul, int const&>(std::tuple<int const&>&) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) (20,000x)
 40,000 ( 0.05%)  	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 60,000 ( 0.07%)        { }
      .           
      .           #if defined(__cpp_lib_apply) || defined(__cpp_lib_make_from_tuple) // C++ >= 17
      .             // Unpack a std::tuple into a type trait and use its value.
      .             // For cv std::tuple<_Up> the result is _Trait<_Tp, cv _Up...>::value.
      .             // For cv std::tuple<_Up>& the result is _Trait<_Tp, cv _Up&...>::value.
      .             // Otherwise the result is false (because we don't know if std::get throws).
      .             template<template<typename...> class _Trait, typename _Tp, typename _Tuple>
      .               inline constexpr bool __unpack_std_tuple = false;
-- line 2897 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir               

-- line 470 ----------------------------------------
      .                  *  @param  __a  An allocator.
      .                  *  @param  __n  The number of objects to allocate space for.
      .                  *
      .                  *  Calls @c a.allocate(n)
      .                 */
      .                 [[__nodiscard__,__gnu__::__always_inline__]]
      .                 static _GLIBCXX20_CONSTEXPR pointer
      .                 allocate(allocator_type& __a, size_type __n)
153,588 ( 0.17%)        { return __a.allocate(__n); }
    905 ( 0.00%)  => /usr/include/c++/14.2.1/bits/new_allocator.h:std::__new_allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > >::allocate(unsigned long, void const*) (1x)
      .           
      .                 /**
      .                  *  @brief  Allocate memory.
      .                  *  @param  __a  An allocator.
      .                  *  @param  __n  The number of objects to allocate space for.
      .                  *  @param  __hint Aid to locality.
      .                  *  @return Memory of suitable size and alignment for @a n objects
      .                  *          of type @c value_type
-- line 486 ----------------------------------------
-- line 505 ----------------------------------------
      .                  *  @param  __p  Pointer to the memory to deallocate.
      .                  *  @param  __n  The number of objects space was allocated for.
      .                  *
      .                  *  Calls <tt> a.deallocate(p, n) </tt>
      .                 */
      .                 [[__gnu__::__always_inline__]]
      .                 static _GLIBCXX20_CONSTEXPR void
      .                 deallocate(allocator_type& __a, pointer __p, size_type __n)
153,587 ( 0.17%)        { __a.deallocate(__p, __n); }
    188 ( 0.00%)  => /usr/include/c++/14.2.1/bits/new_allocator.h:std::__new_allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > >::deallocate(std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >*, unsigned long) (1x)
      .           
      .                 /**
      .                  *  @brief  Construct an object of type `_Up`
      .                  *  @param  __a  An allocator.
      .                  *  @param  __p  Pointer to memory of suitable size and alignment for
      .                  *	       an object of type `_Up`.
      .                  *  @param  __args Constructor arguments.
      .                  *
-- line 521 ----------------------------------------
-- line 526 ----------------------------------------
      .                 template<typename _Up, typename... _Args>
      .           	[[__gnu__::__always_inline__]]
      .           	static _GLIBCXX20_CONSTEXPR void
      .           	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
      .           		  _Args&&... __args)
      .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
      .           	{
      .           #if __cplusplus <= 201703L
360,000 ( 0.41%)  	  __a.construct(__p, std::forward<_Args>(__args)...);
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&) (20,000x)
      .           #else
      .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
      .           #endif
 20,000 ( 0.02%)  	}
      .           
      .                 /**
      .                  *  @brief  Destroy an object of type @a _Up
      .                  *  @param  __a  An allocator.
      .                  *  @param  __p  Pointer to the object to destroy
      .                  *
      .                  *  Calls @c __a.destroy(__p).
      .                 */
-- line 546 ----------------------------------------
-- line 550 ----------------------------------------
      .           	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
      .           	noexcept(is_nothrow_destructible<_Up>::value)
      .           	{
      .           #if __cplusplus <= 201703L
      .           	  __a.destroy(__p);
      .           #else
      .           	  std::destroy_at(__p);
      .           #endif
 20,000 ( 0.02%)  	}
      .           
      .                 /**
      .                  *  @brief  The maximum supported allocation size
      .                  *  @param  __a  An allocator.
      .                  *  @return @c __a.max_size()
      .                 */
      .                 [[__gnu__::__always_inline__]]
      .                 static _GLIBCXX20_CONSTEXPR size_type
      .                 max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
      .                 {
      .           #if __cplusplus <= 201703L
      1 ( 0.00%)  	return __a.max_size();
      .           #else
      .           	return size_t(-1) / sizeof(value_type);
      .           #endif
      .                 }
      .           
      .                 /**
      .                  *  @brief  Obtain an allocator to use when copying a container.
      .                  *  @param  __rhs  An allocator.
-- line 578 ----------------------------------------
-- line 936 ----------------------------------------
      .           
      .           #if _GLIBCXX_HOSTED
      .             template<typename _ForwardIterator, typename _Tp>
      .               __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
      .               inline void
      .               _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      .           	     allocator<_Tp>&)
      .               {
      5 ( 0.00%)        std::_Destroy(__first, __last);
5,980,122 ( 6.75%)  => /usr/include/c++/14.2.1/bits/stl_construct.h:void std::_Destroy<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >*>(std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >*, std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >*) (1x)
      1 ( 0.00%)      }
      .           #endif
      .             /// @endcond
      .           
      .           _GLIBCXX_END_NAMESPACE_VERSION
      .           } // namespace std
      .           #endif // _ALLOC_TRAITS_H

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/hashtable.h
--------------------------------------------------------------------------------
Ir               

-- line 302 ----------------------------------------
      .                 struct _Scoped_node
      .                 {
      .           	// Take ownership of a node with a constructed element.
      .           	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
      .           	: _M_h(__h), _M_node(__n) { }
      .           
      .           	// Allocate a node and construct an element within it.
      .           	template<typename... _Args>
220,000 ( 0.25%)  	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 60,000 ( 0.07%)  	  : _M_h(__h),
380,000 ( 0.43%)  	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
11,567,052 (13.06%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (20,000x)
140,000 ( 0.16%)  	  { }
      .           
      .           	// Destroy element and deallocate node.
220,000 ( 0.25%)  	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
      .           
      .           	_Scoped_node(const _Scoped_node&) = delete;
      .           	_Scoped_node& operator=(const _Scoped_node&) = delete;
      .           
      .           	__hashtable_alloc* _M_h;
      .           	__node_ptr _M_node;
      .                 };
      .           
-- line 324 ----------------------------------------
-- line 413 ----------------------------------------
      .                 void
      .                 _M_update_bbegin(__node_ptr __n)
      .                 {
      .           	_M_before_begin._M_nxt = __n;
      .           	_M_update_bbegin();
      .                 }
      .           
      .                 bool
 11,760 ( 0.01%)        _M_uses_single_bucket(__buckets_ptr __bkts) const
 26,460 ( 0.03%)        { return __builtin_expect(__bkts == &_M_single_bucket, false); }
      .           
      .                 bool
      .                 _M_uses_single_bucket() const
      .                 { return _M_uses_single_bucket(_M_buckets); }
      .           
      .                 static constexpr size_t
 40,226 ( 0.05%)        __small_size_threshold() noexcept
      .                 {
      .           	return
 20,113 ( 0.02%)  	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
100,565 ( 0.11%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_hash_traits<std::hash<int> >::__small_size_threshold() (20,113x)
 40,226 ( 0.05%)        }
      .           
      .                 __hashtable_alloc&
      .                 _M_base_alloc() { return *this; }
      .           
      .                 __buckets_ptr
  9,700 ( 0.01%)        _M_allocate_buckets(size_type __bkt_count)
      .                 {
  9,700 ( 0.01%)  	if (__builtin_expect(__bkt_count == 1, false))
      .           	  {
      .           	    _M_single_bucket = nullptr;
      .           	    return &_M_single_bucket;
      .           	  }
      .           
 11,640 ( 0.01%)  	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
649,734 ( 0.73%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_allocate_buckets(unsigned long) (1,940x)
  3,880 ( 0.00%)        }
      .           
      .                 void
 17,640 ( 0.02%)        _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
      .                 {
 20,580 ( 0.02%)  	if (_M_uses_single_bucket(__bkts))
 38,220 ( 0.04%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const (2,940x)
  1,000 ( 0.00%)  	  return;
      .           
 13,580 ( 0.02%)  	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
476,900 ( 0.54%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (1,940x)
  5,880 ( 0.01%)        }
      .           
      .                 void
 11,760 ( 0.01%)        _M_deallocate_buckets()
 32,340 ( 0.04%)        { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
573,800 ( 0.65%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (2,940x)
      .           
      .                 // Gets bucket begin, deals with the fact that non-empty buckets contain
      .                 // their before begin node.
      .                 __node_ptr
      .                 _M_bucket_begin(size_type __bkt) const
      .                 {
      .           	__node_base_ptr __n = _M_buckets[__bkt];
      .           	return __n ? static_cast<__node_ptr>(__n->_M_nxt) : nullptr;
      .                 }
      .           
      .                 __node_ptr
 14,829 ( 0.02%)        _M_begin() const
 19,772 ( 0.02%)        { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
      .           
      .                 // Assign *this using another _Hashtable instance. Whether elements
      .                 // are copied or moved depends on the _Ht reference.
      .                 template<typename _Ht>
      .           	void
      .           	_M_assign_elements(_Ht&&);
      .           
      .                 template<typename _Ht, typename _NodeGenerator>
-- line 482 ----------------------------------------
-- line 531 ----------------------------------------
      .                 template<typename _InputIterator>
      .           	_Hashtable(_InputIterator __first, _InputIterator __last,
      .           		   size_type __bkt_count_hint,
      .           		   const _Hash&, const _Equal&, const allocator_type&,
      .           		   false_type __uks);
      .           
      .               public:
      .                 // Constructor, destructor, assignment, swap
 33,000 ( 0.04%)        _Hashtable() = default;
 35,000 ( 0.04%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable_base() (1,000x)
 22,000 ( 0.02%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_Hashtable_alloc() (1,000x)
 12,000 ( 0.01%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) (1,000x)
  8,000 ( 0.01%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() (1,000x)
      .           
      .                 _Hashtable(const _Hashtable&);
      .           
      .                 _Hashtable(const _Hashtable&, const allocator_type&);
      .           
      .                 explicit
      .                 _Hashtable(size_type __bkt_count_hint,
      .           		 const _Hash& __hf = _Hash(),
-- line 547 ----------------------------------------
-- line 628 ----------------------------------------
      .           		      __is_nothrow_swappable<_Equal>>::value);
      .           
      .                 // Basic container operations
      .                 iterator
      .                 begin() noexcept
      .                 { return iterator(_M_begin()); }
      .           
      .                 const_iterator
  7,021 ( 0.01%)        begin() const noexcept
 14,042 ( 0.02%)        { return const_iterator(_M_begin()); }
 23,069 ( 0.03%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<int const, int>, false, false>::_Node_const_iterator(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (1,003x)
  7,021 ( 0.01%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const (1,003x)
      .           
      .                 iterator
      .                 end() noexcept
      .                 { return iterator(nullptr); }
      .           
      .                 const_iterator
154,812 ( 0.17%)        end() const noexcept
221,160 ( 0.25%)        { return const_iterator(nullptr); }
508,668 ( 0.57%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<int const, int>, false, false>::_Node_const_iterator(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (22,116x)
      .           
      .                 const_iterator
      .                 cbegin() const noexcept
      .                 { return const_iterator(_M_begin()); }
      .           
      .                 const_iterator
      .                 cend() const noexcept
      .                 { return const_iterator(nullptr); }
      .           
      .                 size_type
 60,339 ( 0.07%)        size() const noexcept
 80,452 ( 0.09%)        { return _M_element_count; }
      .           
      .                 _GLIBCXX_NODISCARD bool
      .                 empty() const noexcept
      .                 { return size() == 0; }
      .           
      .                 allocator_type
      .                 get_allocator() const noexcept
      .                 { return allocator_type(this->_M_node_allocator()); }
-- line 665 ----------------------------------------
-- line 791 ----------------------------------------
      .           	       typename = __has_is_transparent_t<_Equal, _Kt>>
      .           	pair<const_iterator, const_iterator>
      .           	_M_equal_range_tr(const _Kt& __k) const;
      .           #endif // __glibcxx_generic_unordered_lookup
      .           
      .               private:
      .                 // Bucket index computation helpers.
      .                 size_type
150,240 ( 0.17%)        _M_bucket_index(const __node_value_type& __n) const noexcept
270,432 ( 0.31%)        { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
3,605,760 ( 4.07%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&, unsigned long) const (30,048x)
      .           
      .                 size_type
205,265 ( 0.23%)        _M_bucket_index(__hash_code __c) const
369,477 ( 0.42%)        { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
1,272,643 ( 1.44%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(unsigned long, unsigned long) const (41,053x)
      .           
      .                 __node_base_ptr
      .                 _M_find_before_node(const key_type&);
      .           
      .                 // Find and insert helper functions and types
      .                 // Find the node before the one matching the criteria.
      .                 __node_base_ptr
      .                 _M_find_before_node(size_type, const key_type&, __hash_code) const;
      .           
      .                 template<typename _Kt>
      .           	__node_base_ptr
      .           	_M_find_before_node_tr(size_type, const _Kt&, __hash_code) const;
      .           
      .                 __node_ptr
273,791 ( 0.31%)        _M_find_node(size_type __bkt, const key_type& __key,
      .           		   __hash_code __c) const
      .                 {
273,791 ( 0.31%)  	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
6,819,665 ( 7.70%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const (39,113x)
 78,226 ( 0.09%)  	if (__before_n)
    315 ( 0.00%)  	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 39,008 ( 0.04%)  	return nullptr;
 78,226 ( 0.09%)        }
      .           
      .                 template<typename _Kt>
      .           	__node_ptr
      .           	_M_find_node_tr(size_type __bkt, const _Kt& __key,
      .           			__hash_code __c) const
      .           	{
      .           	  auto __before_n = _M_find_before_node_tr(__bkt, __key, __c);
      .           	  if (__before_n)
      .           	    return static_cast<__node_ptr>(__before_n->_M_nxt);
      .           	  return nullptr;
      .           	}
      .           
      .                 // Insert a node at the beginning of a bucket.
      .                 void
160,000 ( 0.18%)        _M_insert_bucket_begin(size_type __bkt, __node_ptr __node)
      .                 {
160,000 ( 0.18%)  	if (_M_buckets[__bkt])
      .           	  {
      .           	    // Bucket is not empty, we just need to insert the new node
      .           	    // after the bucket before begin.
 68,418 ( 0.08%)  	    __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 60,816 ( 0.07%)  	    _M_buckets[__bkt]->_M_nxt = __node;
      .           	  }
      .           	else
      .           	  {
      .           	    // The bucket is empty, the new node is inserted at the
      .           	    // beginning of the singly-linked list and the bucket will
      .           	    // contain _M_before_begin pointer.
 49,592 ( 0.06%)  	    __node->_M_nxt = _M_before_begin._M_nxt;
 37,194 ( 0.04%)  	    _M_before_begin._M_nxt = __node;
      .           
 49,592 ( 0.06%)  	    if (__node->_M_nxt)
      .           	      // We must update former begin bucket that is pointing to
      .           	      // _M_before_begin.
159,572 ( 0.18%)  	      _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
1,527,332 ( 1.73%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&) const (11,398x)
 79,786 ( 0.09%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_M_next() const (11,398x)
      .           
 99,184 ( 0.11%)  	    _M_buckets[__bkt] = &_M_before_begin;
      .           	  }
127,602 ( 0.14%)        }
      .           
      .                 // Remove the bucket first node
      .                 void
      .                 _M_remove_bucket_begin(size_type __bkt, __node_ptr __next_n,
      .           			     size_type __next_bkt)
      .                 {
      .           	if (!__next_n)
      .           	  _M_buckets[__bkt] = nullptr;
-- line 873 ----------------------------------------
-- line 1646 ----------------------------------------
      .           	  __ht.clear();
      .           	}
      .               }
      .           
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
  4,000 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      .               ~_Hashtable() noexcept
      .               {
      .                 // Getting a bucket index from a node shall not throw because it is used
      .                 // in methods (erase, swap...) that shall not throw. Need a complete
      .                 // type to check this, so do it in the destructor not at class scope.
      .                 static_assert(noexcept(declval<const __hash_code_base_access&>()
      .           			._M_bucket_index(declval<const __node_value_type&>(),
      .           					 (std::size_t)0)),
      .           		    "Cache the hash code or qualify your functors involved"
      .           		    " in hash code and bucket index computation with noexcept");
      .           
  3,000 ( 0.00%)        clear();
5,572,452 ( 6.29%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear() (1,000x)
  3,000 ( 0.00%)        _M_deallocate_buckets();
327,644 ( 0.37%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets() (1,000x)
  6,000 ( 0.01%)      }
 29,000 ( 0.03%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::~_Hashtable_alloc() (1,000x)
      .           
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               void
      .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
-- line 1677 ----------------------------------------
-- line 1738 ----------------------------------------
      .                 return iterator(_M_find_node(__bkt, __k, __code));
      .               }
      .           
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               auto
181,017 ( 0.20%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      .               find(const key_type& __k) const
      .               -> const_iterator
      .               {
181,017 ( 0.20%)        if (size() <= __small_size_threshold())
201,130 ( 0.23%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::__small_size_threshold() (20,113x)
140,791 ( 0.16%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::size() const (20,113x)
      .           	{
  7,000 ( 0.01%)  	  for (auto __it = _M_begin(); __it; __it = __it->_M_next())
  7,000 ( 0.01%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const (1,000x)
      .           	    if (this->_M_key_equals(__k, *__it))
      .           	      return const_iterator(__it);
  4,000 ( 0.00%)  	  return end();
 40,000 ( 0.05%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::end() const (1,000x)
      .           	}
      .           
114,678 ( 0.13%)        __hash_code __code = this->_M_hash_code(__k);
745,407 ( 0.84%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const (19,113x)
114,678 ( 0.13%)        std::size_t __bkt = _M_bucket_index(__code);
860,085 ( 0.97%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const (19,113x)
229,356 ( 0.26%)        return const_iterator(_M_find_node(__bkt, __k, __code));
3,777,104 ( 4.27%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const (19,113x)
439,599 ( 0.50%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<int const, int>, false, false>::_Node_const_iterator(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (19,113x)
120,678 ( 0.14%)      }
      .           
      .           #if __cplusplus > 201703L
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               template<typename _Kt, typename, typename>
      .                 auto
-- line 1770 ----------------------------------------
-- line 2053 ----------------------------------------
      .           
      .             // Find the node before the one whose key compares equal to k in the bucket
      .             // bkt. Return nullptr if no node is found.
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               auto
273,791 ( 0.31%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      .               _M_find_before_node(size_type __bkt, const key_type& __k,
      .           			__hash_code __code) const
      .               -> __node_base_ptr
      .               {
273,791 ( 0.31%)        __node_base_ptr __prev_p = _M_buckets[__bkt];
 78,226 ( 0.09%)        if (!__prev_p)
 46,432 ( 0.05%)  	return nullptr;
      .           
 47,691 ( 0.05%)        for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 20,936 ( 0.02%)  	   __p = __p->_M_next())
 36,638 ( 0.04%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_M_next() const (5,234x)
      .           	{
195,413 ( 0.22%)  	  if (this->_M_equals(__k, __code, *__p))
2,747,135 ( 3.10%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&) const (21,131x)
    210 ( 0.00%)  	    return __prev_p;
      .           
349,474 ( 0.39%)  	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
2,499,100 ( 2.82%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&) const (18,650x)
130,550 ( 0.15%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_M_next() const (18,650x)
 15,792 ( 0.02%)  	    break;
 10,468 ( 0.01%)  	  __prev_p = __p;
      .           	}
      .           
 15,792 ( 0.02%)        return nullptr;
 78,226 ( 0.09%)      }
      .           
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               template<typename _Kt>
      .                 auto
      .                 _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
-- line 2091 ----------------------------------------
-- line 2216 ----------------------------------------
      .                 return { __hint, this->_M_hash_code(__k) };
      .               }
      .           
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               auto
240,000 ( 0.27%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      .               _M_insert_unique_node(size_type __bkt, __hash_code __code,
      .           			  __node_ptr __node, size_type __n_elt)
      .               -> iterator
      .               {
120,000 ( 0.14%)        __rehash_guard_t __rehash_guard(_M_rehash_policy);
620,000 ( 0.70%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_RehashStateGuard<std::__detail::_Prime_rehash_policy>::_RehashStateGuard(std::__detail::_Prime_rehash_policy&) (20,000x)
      .                 std::pair<bool, std::size_t> __do_rehash
280,004 ( 0.32%)  	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
548,553 ( 0.62%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/hashtable_c++0x.cc:std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const (20,000x)
  1,103 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
      .           					  __n_elt);
      .           
 60,000 ( 0.07%)        if (__do_rehash.first)
      .           	{
  9,700 ( 0.01%)  	  _M_rehash(__do_rehash.second, true_type{});
3,231,146 ( 3.65%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, std::integral_constant<bool, true>) (1,940x)
 11,640 ( 0.01%)  	  __bkt = _M_bucket_index(__code);
 87,300 ( 0.10%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const (1,940x)
      .           	}
      .           
 20,000 ( 0.02%)        __rehash_guard._M_guarded_obj = nullptr;
140,000 ( 0.16%)        this->_M_store_code(*__node, __code);
160,000 ( 0.18%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node_code_cache<false>&, unsigned long) const (20,000x)
      .           
      .                 // Always insert at the beginning of the bucket.
120,000 ( 0.14%)        _M_insert_bucket_begin(__bkt, __node);
2,579,088 ( 2.91%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, int>, false>*) (20,000x)
100,000 ( 0.11%)        ++_M_element_count;
140,000 ( 0.16%)        return iterator(__node);
460,000 ( 0.52%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, int>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (20,000x)
180,000 ( 0.20%)      }
220,000 ( 0.25%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_RehashStateGuard<std::__detail::_Prime_rehash_policy>::~_RehashStateGuard() (20,000x)
      .           
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               auto
      .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
-- line 2256 ----------------------------------------
-- line 2572 ----------------------------------------
      .                 return iterator(__n);
      .               }
      .           
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               void
  4,000 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      .               clear() noexcept
      .               {
  8,000 ( 0.01%)        this->_M_deallocate_nodes(_M_begin());
5,511,702 ( 6.23%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (1,000x)
  7,000 ( 0.01%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const (1,000x)
  7,000 ( 0.01%)        __builtin_memset(_M_buckets, 0,
 25,750 ( 0.03%)  => /usr/src/debug/glibc/glibc/string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms (1,000x)
  2,000 ( 0.00%)  		       _M_bucket_count * sizeof(__node_base_ptr));
  2,000 ( 0.00%)        _M_element_count = 0;
  2,000 ( 0.00%)        _M_before_begin._M_nxt = nullptr;
  3,000 ( 0.00%)      }
      .           
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               void
      .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
-- line 2597 ----------------------------------------
-- line 2611 ----------------------------------------
      .               }
      .           
      .             // Rehash when there is no equivalent elements.
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               void
  9,700 ( 0.01%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      .               _M_rehash(size_type __bkt_count, true_type /* __uks */)
      .               {
 11,640 ( 0.01%)        __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
684,654 ( 0.77%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_allocate_buckets(unsigned long) (1,940x)
  7,760 ( 0.01%)        __node_ptr __p = _M_begin();
 13,580 ( 0.02%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const (1,940x)
  3,880 ( 0.00%)        _M_before_begin._M_nxt = nullptr;
  1,940 ( 0.00%)        std::size_t __bbegin_bkt = 0;
 30,804 ( 0.03%)        while (__p)
      .           	{
 49,968 ( 0.06%)  	  __node_ptr __next = __p->_M_next();
 87,444 ( 0.10%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_M_next() const (12,492x)
      .           	  std::size_t __bkt
 99,936 ( 0.11%)  	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
1,499,040 ( 1.69%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&, unsigned long) const (12,492x)
 87,444 ( 0.10%)  	  if (!__new_buckets[__bkt])
      .           	    {
 41,032 ( 0.05%)  	      __p->_M_nxt = _M_before_begin._M_nxt;
 30,774 ( 0.03%)  	      _M_before_begin._M_nxt = __p;
 71,806 ( 0.08%)  	      __new_buckets[__bkt] = &_M_before_begin;
 41,032 ( 0.05%)  	      if (__p->_M_nxt)
 55,908 ( 0.06%)  		__new_buckets[__bbegin_bkt] = __p;
 30,774 ( 0.03%)  	      __bbegin_bkt = __bkt;
      .           	    }
      .           	  else
      .           	    {
 17,872 ( 0.02%)  	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 15,638 ( 0.02%)  	      __new_buckets[__bkt]->_M_nxt = __p;
      .           	    }
      .           
 24,984 ( 0.03%)  	  __p = __next;
      .           	}
      .           
  5,820 ( 0.01%)        _M_deallocate_buckets();
290,256 ( 0.33%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets() (1,940x)
  5,820 ( 0.01%)        _M_bucket_count = __bkt_count;
  5,820 ( 0.01%)        _M_buckets = __new_buckets;
  5,820 ( 0.01%)      }
      .           
      .             // Rehash when there can be equivalent elements, preserve their relative
      .             // order.
      .             template<typename _Key, typename _Value, typename _Alloc,
      .           	   typename _ExtractKey, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               void
-- line 2661 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: Graph.cpp
--------------------------------------------------------------------------------
Ir               

      .           
      .           #include "Graph.hpp"
      .           #include <iostream>
      .           #include <stack>
      .           
     29 ( 0.00%)  Graph::Graph(int vertices) : V(vertices), adj(vertices) {}
161,186 ( 0.18%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::vector(unsigned long, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > const&) (1x)
      .           
      .           void Graph::addEdge(int u, int v)
 60,000 ( 0.07%)  {
150,000 ( 0.17%)      adj[u][v]++;
15,251,486 (17.23%)  => /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::operator[](int const&) (10,000x)
140,000 ( 0.16%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::operator[](unsigned long) (10,000x)
 40,000 ( 0.05%)      if (u != v)
      .               {
150,000 ( 0.17%)          adj[v][u]++;
15,430,018 (17.43%)  => /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::operator[](int const&) (10,000x)
140,000 ( 0.16%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::operator[](unsigned long) (10,000x)
      .               }
 30,000 ( 0.03%)  }
      .           
      .           bool Graph::existsEdge(int u, int v) const
181,017 ( 0.20%)  {
281,582 ( 0.32%)      if (u < 0 || u >= V || v < 0 || v >= V)
      .               {
      .                   return false; // Invalid vertex
      .               }
583,277 ( 0.66%)      return adj[u].find(v) != adj[u].end();
7,404,896 ( 8.36%)  => /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::find(int const&) const (20,113x)
985,537 ( 1.11%)  => /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::end() const (20,113x)
563,164 ( 0.64%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::operator[](unsigned long) const (40,226x)
241,356 ( 0.27%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, int>, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, int>, false> const&) (20,113x)
100,565 ( 0.11%)  }
      .           
      .           int Graph::getEdgeCount(int u, int v) const
      .           {
      .               if (!existsEdge(u, v))
      .               {
      .                   return 0;
      .               }
      .               return adj[u].at(v);
      .           }
      .           
      .           bool Graph::isEulerianCircuit() const
      7 ( 0.00%)  {
     51 ( 0.00%)      for (const auto &edges : adj)
     93 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > const*, std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > > >(__gnu_cxx::__normal_iterator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > const*, std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > > > const&, __gnu_cxx::__normal_iterator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > const*, std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > > > const&) (3x)
     30 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::end() const (1x)
     29 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::begin() const (1x)
     22 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > const*, std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > > >::operator++() (2x)
     21 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > const*, std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > > >::operator*() const (3x)
      .               {
      3 ( 0.00%)          int degree = 0;
  1,572 ( 0.00%)          for (const auto &[_, count] : edges)
  2,208 ( 0.00%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<int const, int>, false, false>::operator*() const (69x)
  2,070 ( 0.00%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<int const, int>, false, false>::operator++() (69x)
  1,104 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_pair.h:std::tuple_element<1ul, std::pair<int const, int> >::type const& std::get<1ul, int const, int>(std::pair<int const, int> const&) (69x)
  1,035 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_pair.h:std::tuple_element<0ul, std::pair<int const, int> >::type const& std::get<0ul, int const, int>(std::pair<int const, int> const&) (69x)
    864 ( 0.00%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, int>, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, int>, false> const&) (72x)
    180 ( 0.00%)  => /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::begin() const (3x)
    147 ( 0.00%)  => /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::end() const (3x)
      .                   {
    207 ( 0.00%)              degree += count;
      .                   }
     12 ( 0.00%)          if (degree % 2 != 0)
      .                   {
      2 ( 0.00%)              return false;
      .                   }
      .               }
      .               return isConnected();
      5 ( 0.00%)  }
      .           
      .           void Graph::dfs(int v, std::vector<bool> &visited) const
      .           {
      .               visited[v] = true;
      .               for (const auto &[neighbor, _] : adj[v])
      .               {
      .                   if (!visited[neighbor])
      .                   {
-- line 58 ----------------------------------------
-- line 124 ----------------------------------------
      .                       stack.pop();
      .                   }
      .               }
      .           
      .               return circuit;
      .           }
      .           
      .           void Graph::printGraph() const
      7 ( 0.00%)  {
  5,006 ( 0.01%)      for (int i = 0; i < V; i++)
      .               {
 12,000 ( 0.01%)          std::cout << i << ": ";
428,893 ( 0.48%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc:std::ostream::operator<<(int) (1,000x)
270,000 ( 0.30%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (1,000x)
464,000 ( 0.52%)          for (const auto &[neighbor, count] : adj[i])
640,000 ( 0.72%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<int const, int>, false, false>::operator*() const (20,000x)
600,000 ( 0.68%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<int const, int>, false, false>::operator++() (20,000x)
320,000 ( 0.36%)  => /usr/include/c++/14.2.1/bits/stl_pair.h:std::tuple_element<1ul, std::pair<int const, int> >::type const& std::get<1ul, int const, int>(std::pair<int const, int> const&) (20,000x)
300,000 ( 0.34%)  => /usr/include/c++/14.2.1/bits/stl_pair.h:std::tuple_element<0ul, std::pair<int const, int> >::type const& std::get<0ul, int const, int>(std::pair<int const, int> const&) (20,000x)
252,000 ( 0.28%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, int>, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, int>, false> const&) (21,000x)
 60,000 ( 0.07%)  => /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::begin() const (1,000x)
 49,000 ( 0.06%)  => /usr/include/c++/14.2.1/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::end() const (1,000x)
 14,000 ( 0.02%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::operator[](unsigned long) const (1,000x)
      .                   {
220,000 ( 0.25%)              for (int j = 0; j < count; j++)
      .                       {
260,000 ( 0.29%)                  std::cout << neighbor << " ";
8,578,844 ( 9.69%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc:std::ostream::operator<<(int) (20,000x)
5,260,000 ( 5.94%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (20,000x)
      .                       }
      .                   }
  6,000 ( 0.01%)          std::cout << std::endl;
431,000 ( 0.49%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::ostream::operator<<(std::ostream& (*)(std::ostream&)) (1,000x)
      .               }
      6 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/ext/aligned_buffer.h
--------------------------------------------------------------------------------
Ir               

-- line 96 ----------------------------------------
      .           	std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;
      .           
      .                 __aligned_buffer() = default;
      .           
      .                 // Can be used to avoid value-initialization
      .                 __aligned_buffer(std::nullptr_t) { }
      .           
      .                 void*
240,207 ( 0.27%)        _M_addr() noexcept
      .                 {
 80,069 ( 0.09%)          return static_cast<void*>(&_M_storage);
160,138 ( 0.18%)        }
      .           
      .                 const void*
191,013 ( 0.22%)        _M_addr() const noexcept
      .                 {
 63,671 ( 0.07%)          return static_cast<const void*>(&_M_storage);
127,342 ( 0.14%)        }
      .           
      .                 _Tp*
320,276 ( 0.36%)        _M_ptr() noexcept
400,345 ( 0.45%)        { return static_cast<_Tp*>(_M_addr()); }
480,414 ( 0.54%)  => /usr/include/c++/14.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_addr() (80,069x)
      .           
      .                 const _Tp*
254,684 ( 0.29%)        _M_ptr() const noexcept
318,355 ( 0.36%)        { return static_cast<const _Tp*>(_M_addr()); }
382,026 ( 0.43%)  => /usr/include/c++/14.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_addr() const (63,671x)
      .               };
      .           #pragma GCC diagnostic pop
      .           #endif
      .           
      .           } // namespace
      .           
      .           #endif /* _ALIGNED_BUFFER_H */

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/hashtable_policy.h
--------------------------------------------------------------------------------
Ir               

-- line 104 ----------------------------------------
      .                 { using type = const _Tp; };
      .           
      .               template<typename _Pair>
      .                 struct __1st_type<_Pair&>
      .                 { using type = typename __1st_type<_Pair>::type&; };
      .           
      .               template<typename _Tp>
      .                 typename __1st_type<_Tp>::type&&
318,355 ( 0.36%)        operator()(_Tp&& __x) const noexcept
318,355 ( 0.36%)        { return std::forward<_Tp>(__x).first; }
382,026 ( 0.43%)  => /usr/include/c++/14.2.1/bits/move.h:std::pair<int const, int> const& std::forward<std::pair<int const, int> const&>(std::remove_reference<std::pair<int const, int> const&>::type&) (63,671x)
      .             };
      .           
      .             template<typename _ExKey, typename _Value>
      .               struct _ConvertToValueType;
      .           
      .             template<typename _Value>
      .               struct _ConvertToValueType<_Identity, _Value>
      .               {
-- line 121 ----------------------------------------
-- line 295 ----------------------------------------
      .              *
      .              *  Important traits for hash tables depending on associated hasher.
      .              *
      .              */
      .             template<typename _Hash>
      .               struct _Hashtable_hash_traits
      .               {
      .                 static constexpr std::size_t
 40,226 ( 0.05%)        __small_size_threshold() noexcept
 60,339 ( 0.07%)        { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
      .               };
      .           
      .             /**
      .              *  struct _Hash_node_base
      .              *
      .              *  Nodes, used to wrap elements stored in the hash table.  A policy
      .              *  template parameter of class template _Hashtable controls whether
      .              *  nodes also store a hash code. In some cases (e.g. strings) this
      .              *  may be a performance win.
      .              */
      .             struct _Hash_node_base
      .             {
      .               _Hash_node_base* _M_nxt;
      .           
168,000 ( 0.19%)      _Hash_node_base() noexcept : _M_nxt() { }
      .           
      .               _Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) { }
      .             };
      .           
      .             /**
      .              *  struct _Hash_node_value_base
      .              *
      .              *  Node type with the value to store.
-- line 327 ----------------------------------------
-- line 331 ----------------------------------------
      .               {
      .                 typedef _Value value_type;
      .           
      .                 __gnu_cxx::__aligned_buffer<_Value> _M_storage;
      .           
      .                 [[__gnu__::__always_inline__]]
      .                 _Value*
      .                 _M_valptr() noexcept
460,276 ( 0.52%)        { return _M_storage._M_ptr(); }
300,000 ( 0.34%)  => /usr/include/c++/14.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_ptr() (20,000x)
      .           
      .                 [[__gnu__::__always_inline__]]
      .                 const _Value*
      .                 _M_valptr() const noexcept
318,355 ( 0.36%)        { return _M_storage._M_ptr(); }
638,100 ( 0.72%)  => /usr/include/c++/14.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_ptr() const (42,540x)
      .           
      .                 [[__gnu__::__always_inline__]]
      .                 _Value&
      .                 _M_v() noexcept
 20,069 ( 0.02%)        { return *_M_valptr(); }
      .           
      .                 [[__gnu__::__always_inline__]]
      .                 const _Value&
      .                 _M_v() const noexcept
 63,671 ( 0.07%)        { return *_M_valptr(); }
      .               };
      .           
      .             /**
      .              *  Primary template struct _Hash_node_code_cache.
      .              */
      .             template<bool _Cache_hash_code>
      .               struct _Hash_node_code_cache
      .               { };
-- line 362 ----------------------------------------
-- line 373 ----------------------------------------
      .               : _Hash_node_value_base<_Value>
      .               , _Hash_node_code_cache<_Cache_hash_code>
      .               { };
      .           
      .             /**
      .              *  Primary template struct _Hash_node.
      .              */
      .             template<typename _Value, bool _Cache_hash_code>
200,000 ( 0.23%)      struct _Hash_node
160,000 ( 0.18%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() (20,000x)
      .               : _Hash_node_base
      .               , _Hash_node_value<_Value, _Cache_hash_code>
      .               {
      .                 _Hash_node*
263,529 ( 0.30%)        _M_next() const noexcept
351,372 ( 0.40%)        { return static_cast<_Hash_node*>(this->_M_nxt); }
      .               };
      .           
      .             /// Base class for node iterators.
      .             template<typename _Value, bool _Cache_hash_code>
      .               struct _Node_iterator_base
      .               {
      .                 using __node_type = _Hash_node<_Value, _Cache_hash_code>;
      .           
      .                 __node_type* _M_cur;
      .           
      .                 _Node_iterator_base() : _M_cur(nullptr) { }
248,928 ( 0.28%)        _Node_iterator_base(__node_type* __p) noexcept
373,392 ( 0.42%)        : _M_cur(__p) { }
      .           
      .                 void
 80,276 ( 0.09%)        _M_incr() noexcept
180,621 ( 0.20%)        { _M_cur = _M_cur->_M_next(); }
140,483 ( 0.16%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_M_next() const (20,069x)
      .           
      .                 friend bool
      .                 operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
      .                 noexcept
      .                 { return __x._M_cur == __y._M_cur; }
      .           
      .           #if __cpp_impl_three_way_comparison < 201907L
      .                 friend bool
164,740 ( 0.19%)        operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
      .                 noexcept
329,480 ( 0.37%)        { return __x._M_cur != __y._M_cur; }
      .           #endif
      .               };
      .           
      .             /// Node iterators, used to iterate through all the hashtable.
      .             template<typename _Value, bool __constant_iterators, bool __cache>
      .               struct _Node_iterator
      .               : public _Node_iterator_base<_Value, __cache>
      .               {
-- line 423 ----------------------------------------
-- line 434 ----------------------------------------
      .           				      const value_type*, value_type*>;
      .           
      .                 using reference = __conditional_t<__constant_iterators,
      .           					const value_type&, value_type&>;
      .           
      .                 _Node_iterator() = default;
      .           
      .                 explicit
100,000 ( 0.11%)        _Node_iterator(__node_type* __p) noexcept
160,000 ( 0.18%)        : __base_type(__p) { }
200,000 ( 0.23%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<int const, int>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (20,000x)
      .           
      .                 reference
      .                 operator*() const noexcept
      .                 { return this->_M_cur->_M_v(); }
      .           
      .                 pointer
 80,000 ( 0.09%)        operator->() const noexcept
120,000 ( 0.14%)        { return this->_M_cur->_M_valptr(); }
      .           
      .                 _Node_iterator&
      .                 operator++() noexcept
      .                 {
      .           	this->_M_incr();
      .           	return *this;
      .                 }
      .           
-- line 459 ----------------------------------------
-- line 481 ----------------------------------------
      .                 typedef std::forward_iterator_tag			iterator_category;
      .           
      .                 typedef const value_type*				pointer;
      .                 typedef const value_type&				reference;
      .           
      .                 _Node_const_iterator() = default;
      .           
      .                 explicit
211,160 ( 0.24%)        _Node_const_iterator(__node_type* __p) noexcept
337,856 ( 0.38%)        : __base_type(__p) { }
422,320 ( 0.48%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<int const, int>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (42,232x)
      .           
      .                 _Node_const_iterator(const _Node_iterator<_Value, __constant_iterators,
      .           			   __cache>& __x) noexcept
      .                 : __base_type(__x._M_cur) { }
      .           
      .                 reference
 80,276 ( 0.09%)        operator*() const noexcept
160,552 ( 0.18%)        { return this->_M_cur->_M_v(); }
      .           
      .                 pointer
      .                 operator->() const noexcept
      .                 { return this->_M_cur->_M_valptr(); }
      .           
      .                 _Node_const_iterator&
 80,276 ( 0.09%)        operator++() noexcept
      .                 {
 60,207 ( 0.07%)  	this->_M_incr();
401,380 ( 0.45%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<int const, int>, false>::_M_incr() (20,069x)
 20,069 ( 0.02%)  	return *this;
 40,138 ( 0.05%)        }
      .           
      .                 _Node_const_iterator
      .                 operator++(int) noexcept
      .                 {
      .           	_Node_const_iterator __tmp(*this);
      .           	this->_M_incr();
      .           	return __tmp;
      .                 }
-- line 517 ----------------------------------------
-- line 524 ----------------------------------------
      .             /// into the range [0, N).
      .             struct _Mod_range_hashing
      .             {
      .               typedef std::size_t first_argument_type;
      .               typedef std::size_t second_argument_type;
      .               typedef std::size_t result_type;
      .           
      .               result_type
417,965 ( 0.47%)      operator()(first_argument_type __num,
      .           	       second_argument_type __den) const noexcept
501,558 ( 0.57%)      { return __num % __den; }
      .             };
      .           
      .             /// Default ranged hash function H.  In principle it should be a
      .             /// function object composed from objects of type H1 and H2 such that
      .             /// h(k, N) = h2(h1(k), N), but that would mean making extra copies of
      .             /// h1 and h2.  So instead we'll just use a tag to tell class template
      .             /// hashtable to do that composition.
      .             struct _Default_ranged_hash { };
      .           
      .             /// Default value for rehash policy.  Bucket size is (usually) the
      .             /// smallest prime that keeps the load factor small enough.
      .             struct _Prime_rehash_policy
      .             {
      .               using __has_load_factor = true_type;
      .           
  4,000 ( 0.00%)      _Prime_rehash_policy(float __z = 1.0) noexcept
  8,000 ( 0.01%)      : _M_max_load_factor(__z), _M_next_resize(0) { }
      .           
      .               float
      .               max_load_factor() const noexcept
      .               { return _M_max_load_factor; }
      .           
      .               // Return a bucket size no smaller than n.
      .               std::size_t
      .               _M_next_bkt(std::size_t __n) const;
-- line 559 ----------------------------------------
-- line 569 ----------------------------------------
      .               // is the new bucket count.  If not, return make_pair(false, 0).
      .               std::pair<bool, std::size_t>
      .               _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,
      .           		   std::size_t __n_ins) const;
      .           
      .               typedef std::size_t _State;
      .           
      .               _State
 60,000 ( 0.07%)      _M_state() const
 80,000 ( 0.09%)      { return _M_next_resize; }
      .           
      .               void
      .               _M_reset() noexcept
      .               { _M_next_resize = 0; }
      .           
      .               void
      .               _M_reset(_State __state)
      .               { _M_next_resize = __state; }
-- line 586 ----------------------------------------
-- line 722 ----------------------------------------
      .             };
      .           
      .             template<typename _RehashPolicy>
      .               struct _RehashStateGuard
      .               {
      .                 _RehashPolicy* _M_guarded_obj;
      .                 typename _RehashPolicy::_State _M_prev_state;
      .           
100,000 ( 0.11%)        _RehashStateGuard(_RehashPolicy& __policy)
100,000 ( 0.11%)        : _M_guarded_obj(std::__addressof(__policy))
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::__detail::_Prime_rehash_policy* std::__addressof<std::__detail::_Prime_rehash_policy>(std::__detail::_Prime_rehash_policy&) (20,000x)
100,000 ( 0.11%)        , _M_prev_state(__policy._M_state())
140,000 ( 0.16%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_M_state() const (20,000x)
 60,000 ( 0.07%)        { }
      .                 _RehashStateGuard(const _RehashStateGuard&) = delete;
      .           
 80,000 ( 0.09%)        ~_RehashStateGuard()
      .                 {
 80,000 ( 0.09%)  	if (_M_guarded_obj)
      .           	  _M_guarded_obj->_M_reset(_M_prev_state);
 60,000 ( 0.07%)        }
      .               };
      .           
      .             // Base classes for std::_Hashtable.  We define these base classes
      .             // because in some cases we want to do different things depending on
      .             // the value of a policy class.  In some cases the policy class
      .             // affects which member functions and nested typedefs are defined;
      .             // we handle that by specializing base class templates.  Several of
      .             // the base class templates need to access other members of class
-- line 748 ----------------------------------------
-- line 824 ----------------------------------------
      .           	return __ite->second;
      .                 }
      .               };
      .           
      .             template<typename _Key, typename _Val, typename _Alloc, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               auto
180,000 ( 0.20%)      _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
      .           	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
      .               operator[](const key_type& __k)
      .               -> mapped_type&
      .               {
 40,000 ( 0.05%)        __hashtable* __h = static_cast<__hashtable*>(this);
120,000 ( 0.14%)        __hash_code __code = __h->_M_hash_code(__k);
780,000 ( 0.88%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const (20,000x)
120,000 ( 0.14%)        std::size_t __bkt = __h->_M_bucket_index(__code);
900,000 ( 1.02%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const (20,000x)
180,000 ( 0.20%)        if (auto __node = __h->_M_find_node(__bkt, __k, __code))
3,785,918 ( 4.28%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const (20,000x)
      .           	return __node->_M_v().second;
      .           
200,000 ( 0.23%)        typename __hashtable::_Scoped_node __node {
12,727,052 (14.37%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::_Scoped_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) (20,000x)
      .           	__h,
      .           	std::piecewise_construct,
100,000 ( 0.11%)  	std::tuple<const key_type&>(__k),
720,000 ( 0.81%)  => /usr/include/c++/14.2.1/tuple:std::tuple<int const&>::tuple<true, true>(int const&) (20,000x)
      .           	std::tuple<>()
      .                 };
      .                 auto __pos
160,000 ( 0.18%)  	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
9,328,534 (10.54%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, int>, false>*, unsigned long) (20,000x)
 20,000 ( 0.02%)        __node._M_node = nullptr;
 80,000 ( 0.09%)        return __pos->second;
580,000 ( 0.66%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, int>, false, false>::operator->() const (20,000x)
200,000 ( 0.23%)      }
220,000 ( 0.25%)  => /usr/include/c++/14.2.1/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node() (20,000x)
      .           
      .             template<typename _Key, typename _Val, typename _Alloc, typename _Equal,
      .           	   typename _Hash, typename _RangeHash, typename _Unused,
      .           	   typename _RehashPolicy, typename _Traits>
      .               auto
      .               _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
      .           	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
      .               operator[](key_type&& __k)
-- line 861 ----------------------------------------
-- line 1232 ----------------------------------------
      .              *  final) and when it is worth it (the type is empty.)
      .              */
      .             template<int _Nm, typename _Tp,
      .           	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
      .               struct _Hashtable_ebo_helper;
      .           
      .             /// Specialization using EBO.
      .             template<int _Nm, typename _Tp>
  9,000 ( 0.01%)      struct _Hashtable_ebo_helper<_Nm, _Tp, true>
      .               : private _Tp
      .               {
 22,000 ( 0.02%)        _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
      .           
      .                 template<typename _OtherTp>
      .           	_Hashtable_ebo_helper(_OtherTp&& __tp)
      .           	: _Tp(std::forward<_OtherTp>(__tp))
      .           	{ }
      .           
616,704 ( 0.70%)        const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
383,280 ( 0.43%)        _Tp& _M_get() { return static_cast<_Tp&>(*this); }
      .               };
      .           
      .             /// Specialization not using EBO.
      .             template<int _Nm, typename _Tp>
      .               struct _Hashtable_ebo_helper<_Nm, _Tp, false>
      .               {
      .                 _Hashtable_ebo_helper() = default;
      .           
-- line 1259 ----------------------------------------
-- line 1318 ----------------------------------------
      .                 hash_function() const
      .                 { return _M_hash(); }
      .           
      .               protected:
      .                 typedef std::size_t 				__hash_code;
      .           
      .                 // We need the default constructor for the local iterators and _Hashtable
      .                 // default constructor.
 10,000 ( 0.01%)        _Hash_code_base() = default;
  6,000 ( 0.01%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<int>, true>::_Hashtable_ebo_helper() (1,000x)
      .           
      .                 _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
      .           
      .                 __hash_code
408,265 ( 0.46%)        _M_hash_code(const _Key& __k) const
      .                 {
      .           	static_assert(__is_invocable<const _Hash&, const _Key&>{},
      .           	    "hash function must be invocable with an argument of key type");
734,877 ( 0.83%)  	return _M_hash()(__k);
1,224,795 ( 1.38%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash() const (81,653x)
653,224 ( 0.74%)  => /usr/include/c++/14.2.1/bits/functional_hash.h:std::hash<int>::operator()(int) const (81,653x)
163,306 ( 0.18%)        }
      .           
      .                 template<typename _Kt>
      .           	__hash_code
      .           	_M_hash_code_tr(const _Kt& __k) const
      .           	{
      .           	  static_assert(__is_invocable<const _Hash&, const _Kt&>{},
      .           	    "hash function must be invocable with an argument of key type");
      .           	  return _M_hash()(__k);
-- line 1344 ----------------------------------------
-- line 1348 ----------------------------------------
      .                 _M_hash_code(const _Hash_node_value<_Value, false>& __n) const
      .                 { return _M_hash_code(_ExtractKey{}(__n._M_v())); }
      .           
      .                 __hash_code
      .                 _M_hash_code(const _Hash_node_value<_Value, true>& __n) const
      .                 { return __n._M_hash_code; }
      .           
      .                 std::size_t
369,477 ( 0.42%)        _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
451,583 ( 0.51%)        { return _RangeHash{}(__c, __bkt_count); }
451,583 ( 0.51%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const (41,053x)
      .           
      .                 std::size_t
382,860 ( 0.43%)        _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
      .           		      std::size_t __bkt_count) const
      .           	noexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>()))
      .           		  && noexcept(declval<const _RangeHash&>()((__hash_code)0,
      .           							   (std::size_t)0)) )
      .                 {
808,260 ( 0.91%)  	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
1,659,060 ( 1.87%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const (42,540x)
680,640 ( 0.77%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Select1st::__1st_type<std::pair<int const, int> const&>::type&& std::__detail::_Select1st::operator()<std::pair<int const, int> const&>(std::pair<int const, int> const&) const (42,540x)
467,940 ( 0.53%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const (42,540x)
      .           			    __bkt_count);
212,700 ( 0.24%)        }
      .           
      .                 std::size_t
      .                 _M_bucket_index(const _Hash_node_value<_Value, true>& __n,
      .           		      std::size_t __bkt_count) const
      .           	noexcept( noexcept(declval<const _RangeHash&>()((__hash_code)0,
      .           							(std::size_t)0)) )
      .                 { return _RangeHash{}(__n._M_hash_code, __bkt_count); }
      .           
      .                 void
100,000 ( 0.11%)        _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 60,000 ( 0.07%)        { }
      .           
      .                 void
      .                 _M_copy_code(_Hash_node_code_cache<false>&,
      .           		   const _Hash_node_code_cache<false>&) const
      .                 { }
      .           
      .                 void
      .                 _M_store_code(_Hash_node_code_cache<true>& __n, __hash_code __c) const
-- line 1387 ----------------------------------------
-- line 1392 ----------------------------------------
      .           		   const _Hash_node_code_cache<true>& __from) const
      .                 { __to._M_hash_code = __from._M_hash_code; }
      .           
      .                 void
      .                 _M_swap(_Hash_code_base& __x)
      .                 { std::swap(__ebo_hash::_M_get(), __x.__ebo_hash::_M_get()); }
      .           
      .                 const _Hash&
734,877 ( 0.83%)        _M_hash() const { return __ebo_hash::_M_cget(); }
489,918 ( 0.55%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<int>, true>::_M_cget() const (81,653x)
      .               };
      .           
      .             /// Partial specialization used when nodes contain a cached hash code.
      .             template<typename _Key, typename _Value, typename _ExtractKey,
      .           	   typename _Hash, typename _RangeHash, typename _Unused>
      .               struct _Local_iterator_base<_Key, _Value, _ExtractKey,
      .           				_Hash, _RangeHash, _Unused, true>
      .               : public _Node_iterator_base<_Value, true>
-- line 1408 ----------------------------------------
-- line 1700 ----------------------------------------
      .           					       __hash_cached::value>;
      .           
      .                 using __hash_code = typename __hash_code_base::__hash_code;
      .           
      .               private:
      .                 using _EqualEBO = _Hashtable_ebo_helper<0, _Equal>;
      .           
      .                 static bool
 84,524 ( 0.10%)        _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 63,393 ( 0.07%)        { return true; }
      .           
      .                 static bool
      .                 _S_node_equals(const _Hash_node_code_cache<false>&,
      .           		     const _Hash_node_code_cache<false>&)
      .                 { return true; }
      .           
      .                 static bool
      .                 _S_equals(__hash_code __c, const _Hash_node_code_cache<true>& __n)
-- line 1717 ----------------------------------------
-- line 1718 ----------------------------------------
      .                 { return __c == __n._M_hash_code; }
      .           
      .                 static bool
      .                 _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
      .           		     const _Hash_node_code_cache<true>& __rhn)
      .                 { return __lhn._M_hash_code == __rhn._M_hash_code; }
      .           
      .               protected:
 13,000 ( 0.01%)        _Hashtable_base() = default;
 16,000 ( 0.02%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_Hash_code_base() (1,000x)
  6,000 ( 0.01%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<int>, true>::_Hashtable_ebo_helper() (1,000x)
      .           
      .                 _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
      .                 : __hash_code_base(__hash), _EqualEBO(__eq)
      .                 { }
      .           
      .                 bool
211,310 ( 0.24%)        _M_key_equals(const _Key& __k,
      .           		    const _Hash_node_value<_Value,
      .           					   __hash_cached::value>& __n) const
      .                 {
      .           	static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
      .           	  "key equality predicate must be invocable with two arguments of "
      .           	  "key type");
359,227 ( 0.41%)  	return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
338,096 ( 0.38%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Select1st::__1st_type<std::pair<int const, int> const&>::type&& std::__detail::_Select1st::operator()<std::pair<int const, int> const&>(std::pair<int const, int> const&) const (21,131x)
316,965 ( 0.36%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_eq() const (21,131x)
274,703 ( 0.31%)  => /usr/include/c++/14.2.1/bits/stl_function.h:std::equal_to<int>::operator()(int const&, int const&) const (21,131x)
126,786 ( 0.14%)        }
      .           
      .                 template<typename _Kt>
      .           	bool
      .           	_M_key_equals_tr(const _Kt& __k,
      .           			 const _Hash_node_value<_Value,
      .           					     __hash_cached::value>& __n) const
      .           	{
      .           	  static_assert(
      .           	    __is_invocable<const _Equal&, const _Kt&, const _Key&>{},
      .           	    "key equality predicate must be invocable with two arguments of "
      .           	    "key type");
      .           	  return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
      .           	}
      .           
      .                 bool
147,917 ( 0.17%)        _M_equals(const _Key& __k, __hash_code __c,
      .           		const _Hash_node_value<_Value, __hash_cached::value>& __n) const
380,463 ( 0.43%)        { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
2,070,838 ( 2.34%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_key_equals(int const&, std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&) const (21,131x)
147,917 ( 0.17%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_S_equals(unsigned long, std::__detail::_Hash_node_code_cache<false> const&) (21,131x)
      .           
      .                 template<typename _Kt>
      .           	bool
      .           	_M_equals_tr(const _Kt& __k, __hash_code __c,
      .           		     const _Hash_node_value<_Value,
      .           					    __hash_cached::value>& __n) const
      .           	{ return _S_equals(__c, __n) && _M_key_equals_tr(__k, __n); }
      .           
-- line 1767 ----------------------------------------
-- line 1777 ----------------------------------------
      .                 void
      .                 _M_swap(_Hashtable_base& __x)
      .                 {
      .           	__hash_code_base::_M_swap(__x);
      .           	std::swap(_EqualEBO::_M_get(), __x._EqualEBO::_M_get());
      .                 }
      .           
      .                 const _Equal&
190,179 ( 0.21%)        _M_eq() const { return _EqualEBO::_M_cget(); }
126,786 ( 0.14%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<int>, true>::_M_cget() const (21,131x)
      .               };
      .           
      .             /**
      .              *  Primary class template  _Equality.
      .              *
      .              *  This is for implementing equality comparison for unordered
      .              *  containers, per N3068, by John Lakos and Pablo Halpern.
      .              *  Algorithmically, we follow closely the reference implementations
-- line 1793 ----------------------------------------
-- line 1932 ----------------------------------------
      .                 return true;
      .               }
      .           
      .             /**
      .              * This type deals with all allocation and keeps an allocator instance
      .              * through inheritance to benefit from EBO when possible.
      .              */
      .             template<typename _NodeAlloc>
 10,000 ( 0.01%)      struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 19,000 ( 0.02%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >, true>::~_Hashtable_ebo_helper() (1,000x)
      .               {
      .               private:
      .                 using __ebo_node_alloc = _Hashtable_ebo_helper<0, _NodeAlloc>;
      .           
      .                 template<typename>
      .           	struct __get_value_type;
      .                 template<typename _Val, bool _Cache_hash_code>
      .           	struct __get_value_type<_Hash_node<_Val, _Cache_hash_code>>
-- line 1948 ----------------------------------------
-- line 1960 ----------------------------------------
      .                 using __node_ptr = __node_type*;
      .                 using __node_base = _Hash_node_base;
      .                 using __node_base_ptr = __node_base*;
      .                 using __buckets_alloc_type =
      .           	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
      .                 using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
      .                 using __buckets_ptr = __node_base_ptr*;
      .           
 10,000 ( 0.01%)        _Hashtable_alloc() = default;
 12,000 ( 0.01%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >, true>::_Hashtable_ebo_helper() (1,000x)
      .                 _Hashtable_alloc(const _Hashtable_alloc&) = default;
      .                 _Hashtable_alloc(_Hashtable_alloc&&) = default;
      .           
      .                 template<typename _Alloc>
      .           	_Hashtable_alloc(_Alloc&& __a)
      .           	: __ebo_node_alloc(std::forward<_Alloc>(__a))
      .           	{ }
      .           
      .                 __node_alloc_type&
255,520 ( 0.29%)        _M_node_allocator()
319,400 ( 0.36%)        { return __ebo_node_alloc::_M_get(); }
383,280 ( 0.43%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >, true>::_M_get() (63,880x)
      .           
      .                 const __node_alloc_type&
      .                 _M_node_allocator() const
      .                 { return __ebo_node_alloc::_M_cget(); }
      .           
      .                 // Allocate a node and construct an element within it.
      .                 template<typename... _Args>
      .           	__node_ptr
-- line 1987 ----------------------------------------
-- line 2007 ----------------------------------------
      .                 _M_deallocate_buckets(__buckets_ptr, std::size_t __bkt_count);
      .               };
      .           
      .             // Definitions of class template _Hashtable_alloc's out-of-line member
      .             // functions.
      .             template<typename _NodeAlloc>
      .               template<typename... _Args>
      .                 auto
280,000 ( 0.32%)        _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
      .                 -> __node_ptr
      .                 {
140,000 ( 0.16%)  	auto& __alloc = _M_node_allocator();
300,000 ( 0.34%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_node_allocator() (20,000x)
 20,000 ( 0.02%)  	auto __nptr = __node_alloc_traits::allocate(__alloc, 1);
 80,000 ( 0.09%)  	__node_ptr __n = std::__to_address(__nptr);
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/ptr_traits.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::__to_address<std::__detail::_Hash_node<std::pair<int const, int>, false> >(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (20,000x)
      .           	__try
      .           	  {
120,000 ( 0.14%)  	    ::new ((void*)__n) __node_type;
360,000 ( 0.41%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_Hash_node() (20,000x)
140,000 ( 0.16%)  => /usr/include/c++/14.2.1/new:operator new(unsigned long, void*) (20,000x)
300,000 ( 0.34%)  	    __node_alloc_traits::construct(__alloc, __n->_M_valptr(),
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (20,000x)
      .           					   std::forward<_Args>(__args)...);
 20,000 ( 0.02%)  	    return __n;
      .           	  }
      .           	__catch(...)
      .           	  {
      .           	    __n->~__node_type();
      .           	    __node_alloc_traits::deallocate(__alloc, __nptr, 1);
      .           	    __throw_exception_again;
      .           	  }
200,000 ( 0.23%)        }
      .           
      .             template<typename _NodeAlloc>
      .               void
120,000 ( 0.14%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
      .               {
240,000 ( 0.27%)        __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
300,000 ( 0.34%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_node_allocator() (20,000x)
100,000 ( 0.11%)        _M_deallocate_node_ptr(__n);
3,819,702 ( 4.31%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (20,000x)
 80,000 ( 0.09%)      }
      .           
      .             template<typename _NodeAlloc>
      .               void
100,000 ( 0.11%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
      .               {
      .                 typedef typename __node_alloc_traits::pointer _Ptr;
 80,000 ( 0.09%)        auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
480,000 ( 0.54%)  => /usr/include/c++/14.2.1/bits/ptr_traits.h:std::__ptr_traits_ptr_to<std::__detail::_Hash_node<std::pair<int const, int>, false>*, std::__detail::_Hash_node<std::pair<int const, int>, false>, false>::pointer_to(std::__detail::_Hash_node<std::pair<int const, int>, false>&) (20,000x)
      .                 __n->~__node_type();
140,000 ( 0.16%)        __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
300,000 ( 0.34%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_node_allocator() (20,000x)
 60,000 ( 0.07%)      }
      .           
      .             template<typename _NodeAlloc>
      .               void
  5,000 ( 0.01%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
      .               {
 43,000 ( 0.05%)        while (__n)
      .           	{
 40,000 ( 0.05%)  	  __node_ptr __tmp = __n;
 80,000 ( 0.09%)  	  __n = __n->_M_next();
140,000 ( 0.16%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_M_next() const (20,000x)
100,000 ( 0.11%)  	  _M_deallocate_node(__tmp);
5,099,702 ( 5.76%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (20,000x)
      .           	}
  4,000 ( 0.00%)      }
      .           
      .             template<typename _NodeAlloc>
      .               auto
 17,460 ( 0.02%)      _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
      .               -> __buckets_ptr
      .               {
 11,640 ( 0.01%)        __buckets_alloc_type __alloc(_M_node_allocator());
 29,100 ( 0.03%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_node_allocator() (1,940x)
      .           
  1,940 ( 0.00%)        auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
  7,760 ( 0.01%)        __buckets_ptr __p = std::__to_address(__ptr);
 11,640 ( 0.01%)  => /usr/include/c++/14.2.1/bits/ptr_traits.h:std::__detail::_Hash_node_base** std::__to_address<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base**) (1,940x)
 13,584 ( 0.02%)        __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 43,729 ( 0.05%)  => /usr/src/debug/glibc/glibc/string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms (1,940x)
    805 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
  3,880 ( 0.00%)        return __p;
 11,640 ( 0.01%)      }
      .           
      .             template<typename _NodeAlloc>
      .               void
 17,460 ( 0.02%)      _Hashtable_alloc<_NodeAlloc>::
      .               _M_deallocate_buckets(__buckets_ptr __bkts,
      .           			  std::size_t __bkt_count)
      .               {
      .                 typedef typename __buckets_alloc_traits::pointer _Ptr;
  7,760 ( 0.01%)        auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 46,560 ( 0.05%)  => /usr/include/c++/14.2.1/bits/ptr_traits.h:std::__ptr_traits_ptr_to<std::__detail::_Hash_node_base**, std::__detail::_Hash_node_base*, false>::pointer_to(std::__detail::_Hash_node_base*&) (1,940x)
 11,640 ( 0.01%)        __buckets_alloc_type __alloc(_M_node_allocator());
 29,100 ( 0.03%)  => /usr/include/c++/14.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_node_allocator() (1,940x)
      .                 __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 11,640 ( 0.01%)      }
      .           
      .            ///@} hashtable-detail
      .           } // namespace __detail
      .           /// @endcond
      .           _GLIBCXX_END_NAMESPACE_VERSION
      .           } // namespace std
      .           
      .           #endif // _HASHTABLE_POLICY_H
-- line 2097 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: main.cpp
--------------------------------------------------------------------------------
Ir               

      .           
      .           #include <iostream>
      .           #include <random>
      .           #include <unistd.h>
      .           #include "Graph.hpp"
      .           
      .           void generateRandomGraph(Graph &g, int numVertices, int numEdges, unsigned seed)
     10 ( 0.00%)  {
      5 ( 0.00%)      std::mt19937 gen(seed);
 44,284 ( 0.05%)  => /usr/include/c++/14.2.1/bits/random.h:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::mersenne_twister_engine(unsigned long) (1x)
      6 ( 0.00%)      std::uniform_int_distribution<> dis(0, numVertices - 1);
     32 ( 0.00%)  => /usr/include/c++/14.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::uniform_int_distribution(int, int) (1x)
      .           
 40,441 ( 0.05%)      for (int i = 0; i < numEdges; ++i)
      .               {
 60,654 ( 0.07%)          int u = dis(gen);
2,094,976 ( 2.37%)  => /usr/include/c++/14.2.1/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&) (10,109x)
 60,654 ( 0.07%)          int v = dis(gen);
1,425,369 ( 1.61%)  => /usr/include/c++/14.2.1/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&) (10,109x)
221,352 ( 0.25%)          if (g.existsEdge(u, v) || g.existsEdge(v, u) || u == v)
10,341,394 (11.68%)  => /home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/Graph.cpp:Graph::existsEdge(int, int) const (20,113x)
      .                   {
    109 ( 0.00%)              i--;
    109 ( 0.00%)              continue;
      .                   }
230,012 ( 0.26%)          std::cout << u << " " << v << std::endl;
8,580,217 ( 9.69%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc:std::ostream::operator<<(int) (20,000x)
4,310,000 ( 4.87%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::ostream::operator<<(std::ostream& (*)(std::ostream&)) (10,000x)
2,630,000 ( 2.97%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (10,000x)
  2,565 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (3x)
 60,000 ( 0.07%)          g.addEdge(u, v);
31,391,504 (35.45%)  => /home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/Graph.cpp:Graph::addEdge(int, int) (10,000x)
      .               }
      .           
     11 ( 0.00%)      std::cout << "Generated graph structure:" << std::endl;
    431 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::ostream::operator<<(std::ostream& (*)(std::ostream&)) (1x)
    383 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (1x)
      3 ( 0.00%)      g.printGraph();
18,170,756 (20.52%)  => /home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/Graph.cpp:Graph::printGraph() const (1x)
      6 ( 0.00%)  }
      .           
      .           int main(int argc, char *argv[])
      9 ( 0.00%)  {
      2 ( 0.00%)      int numVertices = 0, numEdges = 0;
      1 ( 0.00%)      unsigned seed = 0;
      .               int opt;
      .           
     53 ( 0.00%)      while ((opt = getopt(argc, argv, "v:e:s:")) != -1)
    826 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
  1,191 ( 0.00%)  => /usr/src/debug/glibc/glibc/posix/getopt.c:getopt (4x)
      .               {
     18 ( 0.00%)          switch (opt)
      .                   {
      .                   case 'v':
     20 ( 0.00%)              numVertices = std::stoi(optarg);
  6,716 ( 0.01%)  => /usr/include/c++/14.2.1/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
  2,304 ( 0.00%)  => /usr/include/c++/14.2.1/bits/basic_string.h:std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (1x)
  1,021 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
      6 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (1x)
      3 ( 0.00%)              break;
      .                   case 'e':
     16 ( 0.00%)              numEdges = std::stoi(optarg);
    183 ( 0.00%)  => /usr/include/c++/14.2.1/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
    329 ( 0.00%)  => /usr/include/c++/14.2.1/bits/basic_string.h:std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (1x)
      6 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (1x)
      3 ( 0.00%)              break;
      .                   case 's':
     16 ( 0.00%)              seed = std::stoul(optarg);
    186 ( 0.00%)  => /usr/include/c++/14.2.1/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
    269 ( 0.00%)  => /usr/include/c++/14.2.1/bits/basic_string.h:std::__cxx11::stoul(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (1x)
      6 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (1x)
      1 ( 0.00%)              break;
      .                   default:
      .                       std::cerr << "Usage: " << argv[0] << " -v <vertices> -e <edges> -s <seed>" << std::endl;
      .                       return 1;
      .                   }
      .               }
      .           
      5 ( 0.00%)      if (numVertices <= 0 || numEdges < numVertices)
      .               {
      .                   std::cerr << "Invalid number of vertices or edges. Ensure vertices > 0 and edges >= vertices." << std::endl;
      .                   return 1;
      .               }
      .           
      8 ( 0.00%)      Graph g(numVertices);
5,980,421 ( 6.75%)  => /home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/Graph.hpp:Graph::~Graph() (1x)
161,227 ( 0.18%)  => /home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/Graph.cpp:Graph::Graph(int) (1x)
      6 ( 0.00%)      generateRandomGraph(g, numVertices, numEdges, seed);
79,665,283 (89.98%)  => main.cpp:generateRandomGraph(Graph&, int, int, unsigned int) (1x)
      .           
     35 ( 0.00%)      std::cout << "Generated random graph with " << numVertices << " vertices and " << numEdges << " edges." << std::endl;
  1,010 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (3x)
    913 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc:std::ostream::operator<<(int) (2x)
    431 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::ostream::operator<<(std::ostream& (*)(std::ostream&)) (1x)
      .           
      5 ( 0.00%)      if (g.isEulerianCircuit())
  9,662 ( 0.01%)  => /home/sibo/Desktop/Year_2_B/Maharahot_hafhala/A_4/Graph.cpp:Graph::isEulerianCircuit() const (1x)
      .               {
      .                   std::cout << "The graph contains an Eulerian circuit." << std::endl;
      .                   std::vector<int> circuit = g.findEulerianCircuit();
      .                   std::cout << "Eulerian circuit: ";
      .                   for (int v : circuit)
      .                   {
      .                       std::cout << v << " ";
      .                   }
      .                   std::cout << std::endl;
      .               }
      .               else
      .               {
     11 ( 0.00%)          std::cout << "The graph does not contain an Eulerian circuit." << std::endl;
    497 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (1x)
    431 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::ostream::operator<<(std::ostream& (*)(std::ostream&)) (1x)
      .               }
      .           
      1 ( 0.00%)      return 0;
      7 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/new
--------------------------------------------------------------------------------
Ir               

-- line 172 ----------------------------------------
      .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
      .           void operator delete[](void*, std::size_t, std::align_val_t)
      .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
      .           #endif // __cpp_sized_deallocation
      .           #endif // __cpp_aligned_new
      .           
      .           // Default placement versions of operator new.
      .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
287,000 ( 0.32%)  { return __p; }
      .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
      .           { return __p; }
      .           
      .           // Default placement versions of operator delete.
      .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
      .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
      .           //@}
      .           } // extern "C++"
-- line 188 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/ptr_traits.h
--------------------------------------------------------------------------------
Ir               

-- line 126 ----------------------------------------
      .                 using element_type = _Tp;
      .           
      .                 /**
      .                  *  @brief  Obtain a pointer to an object
      .                  *  @param  __r  A reference to an object of type `element_type`
      .                  *  @return `addressof(__r)`
      .                 */
      .                 static _GLIBCXX20_CONSTEXPR pointer
 87,760 ( 0.10%)        pointer_to(element_type& __r) noexcept
109,700 ( 0.12%)        { return std::addressof(__r); }
 29,100 ( 0.03%)  => /usr/include/c++/14.2.1/bits/move.h:std::__detail::_Hash_node_base** std::addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&) (1,940x)
      .               };
      .           
      .             template<typename _Ptr, typename _Elt>
      .               struct __ptr_traits_impl : __ptr_traits_ptr_to<_Ptr, _Elt>
      .               {
      .               private:
      .                 template<typename _Tp>
      .           	using __diff_t = typename _Tp::difference_type;
-- line 143 ----------------------------------------
-- line 197 ----------------------------------------
      .               };
      .           
      .             /// Convenience alias for rebinding pointers.
      .             template<typename _Ptr, typename _Tp>
      .               using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;
      .           
      .             template<typename _Tp>
      .               constexpr _Tp*
 65,820 ( 0.07%)      __to_address(_Tp* __ptr) noexcept
      .               {
      .                 static_assert(!std::is_function<_Tp>::value, "not a function pointer");
 21,940 ( 0.02%)        return __ptr;
 43,880 ( 0.05%)      }
      .           
      .           #ifndef __glibcxx_to_address // C++ < 20
      .             template<typename _Ptr>
      .               constexpr typename std::pointer_traits<_Ptr>::element_type*
      .               __to_address(const _Ptr& __ptr)
      .               { return std::__to_address(__ptr.operator->()); }
      .           #else
      .             template<typename _Ptr>
-- line 217 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir               

-- line 90 ----------------------------------------
      .           
      .                 struct _Vector_impl_data
      .                 {
      .           	pointer _M_start;
      .           	pointer _M_finish;
      .           	pointer _M_end_of_storage;
      .           
      .           	_GLIBCXX20_CONSTEXPR
      3 ( 0.00%)  	_Vector_impl_data() _GLIBCXX_NOEXCEPT
      6 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
      3 ( 0.00%)  	{ }
      .           
      .           #if __cplusplus >= 201103L
      .           	_GLIBCXX20_CONSTEXPR
      .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
      .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
      .           	  _M_end_of_storage(__x._M_end_of_storage)
      .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
      .           #endif
-- line 108 ----------------------------------------
-- line 124 ----------------------------------------
      .           	  // information used by TBAA.
      .           	  _Vector_impl_data __tmp;
      .           	  __tmp._M_copy_data(*this);
      .           	  _M_copy_data(__x);
      .           	  __x._M_copy_data(__tmp);
      .           	}
      .                 };
      .           
      9 ( 0.00%)        struct _Vector_impl
      .           	: public _Tp_alloc_type, public _Vector_impl_data
      .                 {
      .           	_GLIBCXX20_CONSTEXPR
      .           	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
      .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
      .           #if __cpp_lib_concepts
      .           	requires is_default_constructible_v<_Tp_alloc_type>
      .           #endif
      .           	: _Tp_alloc_type()
      .           	{ }
      .           
      .           	_GLIBCXX20_CONSTEXPR
     13 ( 0.00%)  	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
      3 ( 0.00%)  	: _Tp_alloc_type(__a)
     12 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::_Vector_base<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_Vector_impl_data::_Vector_impl_data() (1x)
      3 ( 0.00%)  	{ }
      .           
      .           #if __cplusplus >= 201103L
      .           	// Not defaulted, to enforce noexcept(true) even when
      .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
      .           	_GLIBCXX20_CONSTEXPR
      .           	_Vector_impl(_Vector_impl&& __x) noexcept
      .           	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
      .           	{ }
-- line 155 ----------------------------------------
-- line 292 ----------------------------------------
      .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
      .                 };
      .           
      .               public:
      .                 typedef _Alloc allocator_type;
      .           
      .                 _GLIBCXX20_CONSTEXPR
      .                 _Tp_alloc_type&
      6 ( 0.00%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      6 ( 0.00%)        { return this->_M_impl; }
      .           
      .                 _GLIBCXX20_CONSTEXPR
      .                 const _Tp_alloc_type&
      .                 _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
      .                 { return this->_M_impl; }
      .           
      .                 _GLIBCXX20_CONSTEXPR
      .                 allocator_type
-- line 309 ----------------------------------------
-- line 324 ----------------------------------------
      .           #if !_GLIBCXX_INLINE_VERSION
      .                 _GLIBCXX20_CONSTEXPR
      .                 _Vector_base(size_t __n)
      .                 : _M_impl()
      .                 { _M_create_storage(__n); }
      .           #endif
      .           
      .                 _GLIBCXX20_CONSTEXPR
      7 ( 0.00%)        _Vector_base(size_t __n, const allocator_type& __a)
      5 ( 0.00%)        : _M_impl(__a)
     33 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::_Vector_base<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_Vector_impl::_Vector_impl(std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > const&) (1x)
      9 ( 0.00%)        { _M_create_storage(__n); }
    955 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::_Vector_base<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_M_create_storage(unsigned long) (1x)
      .           
      .           #if __cplusplus >= 201103L
      .                 _Vector_base(_Vector_base&&) = default;
      .           
      .                 // Kept for ABI compatibility.
      .           # if !_GLIBCXX_INLINE_VERSION
      .                 _GLIBCXX20_CONSTEXPR
      .                 _Vector_base(_Tp_alloc_type&& __a) noexcept
-- line 342 ----------------------------------------
-- line 358 ----------------------------------------
      .           
      .                 _GLIBCXX20_CONSTEXPR
      .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      .                 { }
      .           #endif
      .           
      .                 _GLIBCXX20_CONSTEXPR
      4 ( 0.00%)        ~_Vector_base() _GLIBCXX_NOEXCEPT
      .                 {
      7 ( 0.00%)  	_M_deallocate(_M_impl._M_start,
    212 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::_Vector_base<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_M_deallocate(std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >*, unsigned long) (1x)
      8 ( 0.00%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
      6 ( 0.00%)        }
     19 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::_Vector_base<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_Vector_impl::~_Vector_impl() (1x)
      .           
      .               public:
      .                 _Vector_impl _M_impl;
      .           
      .                 _GLIBCXX20_CONSTEXPR
      .                 pointer
      5 ( 0.00%)        _M_allocate(size_t __n)
      .                 {
      .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
      6 ( 0.00%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      2 ( 0.00%)        }
      .           
      .                 _GLIBCXX20_CONSTEXPR
      .                 void
      6 ( 0.00%)        _M_deallocate(pointer __p, size_t __n)
      .                 {
      .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
      2 ( 0.00%)  	if (__p)
      6 ( 0.00%)  	  _Tr::deallocate(_M_impl, __p, __n);
      3 ( 0.00%)        }
      .           
      .               protected:
      .           
      .                 _GLIBCXX20_CONSTEXPR
      .                 void
      5 ( 0.00%)        _M_create_storage(size_t __n)
      .                 {
      7 ( 0.00%)  	this->_M_impl._M_start = this->_M_allocate(__n);
    926 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::_Vector_base<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_M_allocate(unsigned long) (1x)
      4 ( 0.00%)  	this->_M_impl._M_finish = this->_M_impl._M_start;
     10 ( 0.00%)  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      3 ( 0.00%)        }
      .               };
      .           
      .             /**
      .              *  @brief A standard container which offers fixed time access to
      .              *  individual elements in any order.
      .              *
      .              *  @ingroup sequences
      .              *  @headerfile vector
-- line 409 ----------------------------------------
-- line 548 ----------------------------------------
      .                  *  @param  __n  The number of elements to initially create.
      .                  *  @param  __a  An allocator.
      .                  *
      .                  *  This constructor fills the %vector with @a __n default
      .                  *  constructed elements.
      .                  */
      .                 explicit
      .                 _GLIBCXX20_CONSTEXPR
      7 ( 0.00%)        vector(size_type __n, const allocator_type& __a = allocator_type())
     12 ( 0.00%)        : _Base(_S_check_init_len(__n, __a), __a)
  1,009 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::_Vector_base<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_Vector_base(unsigned long, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > const&) (1x)
     84 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_S_check_init_len(unsigned long, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > const&) (1x)
      9 ( 0.00%)        { _M_default_initialize(__n); }
160,065 ( 0.18%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_M_default_initialize(unsigned long) (1x)
      .           
      .                 /**
      .                  *  @brief  Creates a %vector with copies of an exemplar element.
      .                  *  @param  __n  The number of elements to initially create.
      .                  *  @param  __value  An element to copy.
      .                  *  @param  __a  An allocator.
      .                  *
      .                  *  This constructor fills the %vector with @a __n copies of @a __value.
-- line 566 ----------------------------------------
-- line 725 ----------------------------------------
      .           
      .                 /**
      .                  *  The dtor only erases the elements, and note that if the
      .                  *  elements themselves are pointers, the pointed-to memory is
      .                  *  not touched in any way.  Managing the pointer is the user's
      .                  *  responsibility.
      .                  */
      .                 _GLIBCXX20_CONSTEXPR
      4 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT
      .                 {
      7 ( 0.00%)  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
      3 ( 0.00%)  		      _M_get_Tp_allocator());
      6 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::_Vector_base<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_M_get_Tp_allocator() (1x)
      .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      6 ( 0.00%)        }
    256 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::_Vector_base<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::~_Vector_base() (1x)
      .           
      .                 /**
      .                  *  @brief  %Vector assignment operator.
      .                  *  @param  __x  A %vector of identical element and allocator types.
      .                  *
      .                  *  All the elements of @a __x are copied, but any unused capacity in
      .                  *  @a __x will not be copied.
      .                  *
-- line 746 ----------------------------------------
-- line 875 ----------------------------------------
      .           
      .                 /**
      .                  *  Returns a read-only (constant) iterator that points to the
      .                  *  first element in the %vector.  Iteration is done in ordinary
      .                  *  element order.
      .                  */
      .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .                 const_iterator
      7 ( 0.00%)        begin() const _GLIBCXX_NOEXCEPT
     11 ( 0.00%)        { return const_iterator(this->_M_impl._M_start); }
     11 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > const*, std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > > >::__normal_iterator(std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > const* const&) (1x)
      .           
      .                 /**
      .                  *  Returns a read/write iterator that points one past the last
      .                  *  element in the %vector.  Iteration is done in ordinary
      .                  *  element order.
      .                  */
      .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .                 iterator
-- line 892 ----------------------------------------
-- line 895 ----------------------------------------
      .           
      .                 /**
      .                  *  Returns a read-only (constant) iterator that points one past
      .                  *  the last element in the %vector.  Iteration is done in
      .                  *  ordinary element order.
      .                  */
      .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .                 const_iterator
      7 ( 0.00%)        end() const _GLIBCXX_NOEXCEPT
     12 ( 0.00%)        { return const_iterator(this->_M_impl._M_finish); }
     11 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > const*, std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > > >::__normal_iterator(std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > const* const&) (1x)
      .           
      .                 /**
      .                  *  Returns a read/write reverse iterator that points to the
      .                  *  last element in the %vector.  Iteration is done in reverse
      .                  *  element order.
      .                  */
      .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .                 reverse_iterator
-- line 912 ----------------------------------------
-- line 1120 ----------------------------------------
      .                  *
      .                  *  This operator allows for easy, array-style, data access.
      .                  *  Note that data access with this operator is unchecked and
      .                  *  out_of_range lookups are not defined. (For checked lookups
      .                  *  see at().)
      .                  */
      .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .                 reference
 80,000 ( 0.09%)        operator[](size_type __n) _GLIBCXX_NOEXCEPT
      .                 {
      .           	__glibcxx_requires_subscript(__n);
160,000 ( 0.18%)  	return *(this->_M_impl._M_start + __n);
 40,000 ( 0.05%)        }
      .           
      .                 /**
      .                  *  @brief  Subscript access to the data contained in the %vector.
      .                  *  @param __n The index of the element for which data should be
      .                  *  accessed.
      .                  *  @return  Read-only (constant) reference to data.
      .                  *
      .                  *  This operator allows for easy, array-style, data access.
      .                  *  Note that data access with this operator is unchecked and
      .                  *  out_of_range lookups are not defined. (For checked lookups
      .                  *  see at().)
      .                  */
      .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      .                 const_reference
164,904 ( 0.19%)        operator[](size_type __n) const _GLIBCXX_NOEXCEPT
      .                 {
      .           	__glibcxx_requires_subscript(__n);
329,808 ( 0.37%)  	return *(this->_M_impl._M_start + __n);
 82,452 ( 0.09%)        }
      .           
      .               protected:
      .                 /// Safety check used only from at().
      .                 _GLIBCXX20_CONSTEXPR
      .                 void
      .                 _M_range_check(size_type __n) const
      .                 {
      .           	if (__n >= this->size())
-- line 1159 ----------------------------------------
-- line 1709 ----------------------------------------
      .           	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
      .           					_M_get_Tp_allocator());
      .                 }
      .           
      .           #if __cplusplus >= 201103L
      .                 // Called by the vector(n) constructor.
      .                 _GLIBCXX20_CONSTEXPR
      .                 void
      5 ( 0.00%)        _M_default_initialize(size_type __n)
      .                 {
      2 ( 0.00%)  	this->_M_impl._M_finish =
      6 ( 0.00%)  	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
160,039 ( 0.18%)  => /usr/include/c++/14.2.1/bits/stl_uninitialized.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >* std::__uninitialized_default_n_a<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >*, unsigned long, std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > >(std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >*, unsigned long, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > >&) (1x)
      4 ( 0.00%)  					   _M_get_Tp_allocator());
      6 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::_Vector_base<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_M_get_Tp_allocator() (1x)
      3 ( 0.00%)        }
      .           #endif
      .           
      .                 // Internal assign functions follow.  The *_aux functions do the actual
      .                 // assignment work for the range versions.
      .           
      .                 // Called by the range assign to implement [23.1.1]/9
      .           
      .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 1730 ----------------------------------------
-- line 1909 ----------------------------------------
      .           	  __throw_length_error(__N(__s));
      .           
      .           	const size_type __len = size() + (std::max)(size(), __n);
      .           	return (__len < size() || __len > max_size()) ? max_size() : __len;
      .                 }
      .           
      .                 // Called by constructors to check initial size.
      .                 static _GLIBCXX20_CONSTEXPR size_type
     15 ( 0.00%)        _S_check_init_len(size_type __n, const allocator_type& __a)
      .                 {
      7 ( 0.00%)  	if (__n > _S_max_size(_Tp_alloc_type(__a)))
     43 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_vector.h:std::vector<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >, std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > >::_S_max_size(std::allocator<std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > > > const&) (1x)
      .           	  __throw_length_error(
      .           	      __N("cannot create std::vector larger than max_size()"));
      1 ( 0.00%)  	return __n;
      6 ( 0.00%)        }
      .           
      .                 static _GLIBCXX20_CONSTEXPR size_type
      7 ( 0.00%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
      .                 {
      .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
      .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
      .           	// (even if std::allocator_traits::max_size says we can).
      8 ( 0.00%)  	const size_t __diffmax
      .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      1 ( 0.00%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
      6 ( 0.00%)  	return (std::min)(__diffmax, __allocmax);
     13 ( 0.00%)  => /usr/include/c++/14.2.1/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (1x)
      5 ( 0.00%)        }
      .           
      .                 // Internal erase functions follow.
      .           
      .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      .                 // _M_assign_aux.
      .                 _GLIBCXX20_CONSTEXPR
      .                 void
      .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
-- line 1943 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/new_allocator.h
--------------------------------------------------------------------------------
Ir               

-- line 80 ----------------------------------------
      .           #if __cplusplus >= 201103L
      .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
      .                 // 2103. propagate_on_container_move_assignment
      .                 typedef std::true_type propagate_on_container_move_assignment;
      .           #endif
      .           
      .                 __attribute__((__always_inline__))
      .                 _GLIBCXX20_CONSTEXPR
  4,884 ( 0.01%)        __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
      .           
      .                 __attribute__((__always_inline__))
      .                 _GLIBCXX20_CONSTEXPR
      2 ( 0.00%)        __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
      .           
      .                 template<typename _Tp1>
      .           	__attribute__((__always_inline__))
      .           	_GLIBCXX20_CONSTEXPR
      .           	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
      .           
      .           #if __cplusplus >= 201103L
      .                 __new_allocator& operator=(const __new_allocator&) = default;
      .           #endif
      .           
      .           #if __cplusplus <= 201703L
 29,316 ( 0.03%)        ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
      .           
      .                 pointer
      .                 address(reference __x) const _GLIBCXX_NOEXCEPT
      .                 { return std::__addressof(__x); }
      .           
      .                 const_pointer
      .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
      .                 { return std::__addressof(__x); }
-- line 112 ----------------------------------------
-- line 118 ----------------------------------------
      .           #else
      .           # define _GLIBCXX_OPERATOR_NEW ::operator new
      .           # define _GLIBCXX_OPERATOR_DELETE ::operator delete
      .           #endif
      .           
      .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
      .                 // about what the return value is when __n == 0.
      .                 _GLIBCXX_NODISCARD _Tp*
175,528 ( 0.20%)        allocate(size_type __n, const void* = static_cast<const void*>(0))
      .                 {
      .           #if __cplusplus >= 201103L
      .           	// _GLIBCXX_RESOLVE_LIB_DEFECTS
      .           	// 3308. std::allocator<void>().allocate(n)
      .           	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
      .           #endif
      .           
153,587 ( 0.17%)  	if (__builtin_expect(__n > this->_M_max_size(), false))
      .           	  {
      .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
      .           	    // 3190. allocator::allocate sometimes returns too little storage
      .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
      .           	      std::__throw_bad_array_new_length();
      .           	    std::__throw_bad_alloc();
      .           	  }
      .           
-- line 142 ----------------------------------------
-- line 143 ----------------------------------------
      .           #if __cpp_aligned_new
      .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
      .           	  {
      .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
      .           	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
      .           							   __al));
      .           	  }
      .           #endif
131,653 ( 0.15%)  	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
409,256 ( 0.46%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (1,940x)
 43,882 ( 0.05%)        }
      .           
      .                 // __p is not permitted to be a null pointer.
      .                 void
131,646 ( 0.15%)        deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
      .                 {
      .           #if __cpp_sized_deallocation
      .           # define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
      .           #else
      .           # define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
      .           #endif
      .           
      .           #if __cpp_aligned_new
      .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
      .           	  {
      .           	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
      .           				     std::align_val_t(alignof(_Tp)));
      .           	    return;
      .           	  }
      .           #endif
173,595 ( 0.20%)  	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
2,199,702 ( 2.48%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (20,000x)
 43,882 ( 0.05%)        }
      .           
      .           #undef _GLIBCXX_SIZED_DEALLOC
      .           #undef _GLIBCXX_OPERATOR_DELETE
      .           #undef _GLIBCXX_OPERATOR_NEW
      .           
      .           #if __cplusplus <= 201703L
      .                 __attribute__((__always_inline__))
      .                 size_type
      .                 max_size() const _GLIBCXX_USE_NOEXCEPT
      1 ( 0.00%)        { return _M_max_size(); }
      .           
      .           #if __cplusplus >= 201103L
      .                 template<typename _Up, typename... _Args>
      .           	__attribute__((__always_inline__))
      .           	void
      .           	construct(_Up* __p, _Args&&... __args)
      .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
500,000 ( 0.56%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
1,460,000 ( 1.65%)  => /usr/include/c++/14.2.1/tuple:std::pair<int const, int>::pair<int const&>(std::piecewise_construct_t, std::tuple<int const&>, std::tuple<>) (20,000x)
480,000 ( 0.54%)  => /usr/include/c++/14.2.1/tuple:std::tuple<int const&>::tuple(std::tuple<int const&>&&) (20,000x)
140,000 ( 0.16%)  => /usr/include/c++/14.2.1/new:operator new(unsigned long, void*) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (20,000x)
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&) (20,000x)
      .           
      .                 template<typename _Up>
      .           	__attribute__((__always_inline__))
      .           	void
      .           	destroy(_Up* __p)
      .           	noexcept(std::is_nothrow_destructible<_Up>::value)
 20,000 ( 0.02%)  	{ __p->~_Up(); }
      .           #else
      .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
      .                 // 402. wrong new expression in [some_] allocator::construct
      .                 __attribute__((__always_inline__))
      .                 void
      .                 construct(pointer __p, const _Tp& __val)
      .                 { ::new((void *)__p) _Tp(__val); }
      .           
-- line 206 ----------------------------------------
-- line 225 ----------------------------------------
      .           #endif
      .           
      .               private:
      .                 __attribute__((__always_inline__))
      .                 _GLIBCXX_CONSTEXPR size_type
      .                 _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      .                 {
      .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
 21,942 ( 0.02%)  	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
      .           #else
      .           	return std::size_t(-1) / sizeof(_Tp);
      .           #endif
      .                 }
      .               };
      .           
      .           _GLIBCXX_END_NAMESPACE_VERSION
      .           } // namespace
-- line 241 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/stl_pair.h
--------------------------------------------------------------------------------
Ir               

-- line 1202 ----------------------------------------
      .           
      .                 template<typename _Tp1, typename _Tp2>
      .           	static constexpr _Tp1&&
      .           	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
      .           	{ return std::forward<_Tp1>(__pair.first); }
      .           
      .                 template<typename _Tp1, typename _Tp2>
      .           	static constexpr const _Tp1&
 60,207 ( 0.07%)  	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 60,207 ( 0.07%)  	{ return __pair.first; }
      .           
      .                 template<typename _Tp1, typename _Tp2>
      .           	static constexpr const _Tp1&&
      .           	__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept
      .           	{ return std::forward<const _Tp1>(__pair.first); }
      .               };
      .           
      .             template<>
-- line 1219 ----------------------------------------
-- line 1226 ----------------------------------------
      .           
      .                 template<typename _Tp1, typename _Tp2>
      .           	static constexpr _Tp2&&
      .           	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
      .           	{ return std::forward<_Tp2>(__pair.second); }
      .           
      .                 template<typename _Tp1, typename _Tp2>
      .           	static constexpr const _Tp2&
 60,207 ( 0.07%)  	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 80,276 ( 0.09%)  	{ return __pair.second; }
      .           
      .                 template<typename _Tp1, typename _Tp2>
      .           	static constexpr const _Tp2&&
      .           	__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept
      .           	{ return std::forward<const _Tp2>(__pair.second); }
      .               };
      .             /// @endcond
      .           
-- line 1243 ----------------------------------------
-- line 1252 ----------------------------------------
      .           
      .             template<size_t _Int, class _Tp1, class _Tp2>
      .               constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
      .               get(pair<_Tp1, _Tp2>&& __in) noexcept
      .               { return __pair_get<_Int>::__move_get(std::move(__in)); }
      .           
      .             template<size_t _Int, class _Tp1, class _Tp2>
      .               constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
160,552 ( 0.18%)      get(const pair<_Tp1, _Tp2>& __in) noexcept
200,690 ( 0.23%)      { return __pair_get<_Int>::__const_get(__in); }
120,414 ( 0.14%)  => /usr/include/c++/14.2.1/bits/stl_pair.h:int const& std::__pair_get<0ul>::__const_get<int const, int>(std::pair<int const, int> const&) (20,069x)
      .           
      .             template<size_t _Int, class _Tp1, class _Tp2>
      .               constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
      .               get(const pair<_Tp1, _Tp2>&& __in) noexcept
      .               { return __pair_get<_Int>::__const_move_get(std::move(__in)); }
      .           
      .           
      .           #ifdef __glibcxx_tuples_by_type // C++ >= 14
-- line 1269 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/move.h
--------------------------------------------------------------------------------
Ir               

-- line 43 ----------------------------------------
      .           
      .             // Used, in C++03 mode too, by allocators, etc.
      .             /**
      .              *  @brief Same as C++11 std::addressof
      .              *  @ingroup utilities
      .              */
      .             template<typename _Tp>
      .               inline _GLIBCXX_CONSTEXPR _Tp*
131,820 ( 0.15%)      __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
131,820 ( 0.15%)      { return __builtin_addressof(__r); }
      .           
      .           #if __cplusplus >= 201103L
      .           
      .             /**
      .              *  @addtogroup utilities
      .              *  @{
      .              */
      .           
-- line 60 ----------------------------------------
-- line 62 ----------------------------------------
      .              *  @brief  Forward an lvalue.
      .              *  @return The parameter cast to the specified type.
      .              *
      .              *  This function is used to implement "perfect forwarding".
      .              */
      .             template<typename _Tp>
      .               _GLIBCXX_NODISCARD
      .               constexpr _Tp&&
971,013 ( 1.10%)      forward(typename std::remove_reference<_Tp>::type& __t) noexcept
971,013 ( 1.10%)      { return static_cast<_Tp&&>(__t); }
      .           
      .             /**
      .              *  @brief  Forward an rvalue.
      .              *  @return The parameter cast to the specified type.
      .              *
      .              *  This function is used to implement "perfect forwarding".
      .              */
      .             template<typename _Tp>
-- line 79 ----------------------------------------
-- line 154 ----------------------------------------
      .              *         referenced by r, even in the presence of an overloaded
      .              *         operator&.
      .              *  @param  __r  Reference to an object or function.
      .              *  @return   The actual address.
      .             */
      .             template<typename _Tp>
      .               _GLIBCXX_NODISCARD
      .               inline _GLIBCXX17_CONSTEXPR _Tp*
 87,760 ( 0.10%)      addressof(_Tp& __r) noexcept
109,700 ( 0.12%)      { return std::__addressof(__r); }
120,000 ( 0.14%)  => /usr/include/c++/14.2.1/bits/move.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::__addressof<std::__detail::_Hash_node<std::pair<int const, int>, false> >(std::__detail::_Hash_node<std::pair<int const, int>, false>&) (20,000x)
      .           
      .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
      .             // 2598. addressof works on temporaries
      .             template<typename _Tp>
      .               const _Tp* addressof(const _Tp&&) = delete;
      .           
      .             // C++11 version of std::exchange for internal use.
      .             template <typename _Tp, typename _Up = _Tp>
-- line 171 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/stl_function.h
--------------------------------------------------------------------------------
Ir               

-- line 366 ----------------------------------------
      .           #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      .           
      .             /// One of the @link comparison_functors comparison functors@endlink.
      .             template<typename _Tp>
      .               struct equal_to : public binary_function<_Tp, _Tp, bool>
      .               {
      .                 _GLIBCXX14_CONSTEXPR
      .                 bool
105,655 ( 0.12%)        operator()(const _Tp& __x, const _Tp& __y) const
169,048 ( 0.19%)        { return __x == __y; }
      .               };
      .           
      .             /// One of the @link comparison_functors comparison functors@endlink.
      .             template<typename _Tp>
      .               struct not_equal_to : public binary_function<_Tp, _Tp, bool>
      .               {
      .                 _GLIBCXX14_CONSTEXPR
      .                 bool
-- line 383 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14.2.1/bits/random.tcc
--------------------------------------------------------------------------------
Ir               

-- line 318 ----------------------------------------
      .           #endif
      .           
      .             template<typename _UIntType,
      .           	   size_t __w, size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f>
      .               void
      5 ( 0.00%)      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
      .           			    __s, __b, __t, __c, __l, __f>::
      .               seed(result_type __sd)
      .               {
      2 ( 0.00%)        _M_x[0] = __detail::__mod<_UIntType,
      3 ( 0.00%)  	__detail::_Shift<_UIntType, __w>::__value>(__sd);
     19 ( 0.00%)  => /usr/include/c++/14.2.1/bits/random.h:unsigned long std::__detail::__mod<unsigned long, 4294967296ul, 1ul, 0ul>(unsigned long) (1x)
      .           
  1,873 ( 0.00%)        for (size_t __i = 1; __i < state_size; ++__i)
      .           	{
  3,115 ( 0.00%)  	  _UIntType __x = _M_x[__i - 1];
  1,869 ( 0.00%)  	  __x ^= __x >> (__w - 2);
  1,869 ( 0.00%)  	  __x *= __f;
  2,492 ( 0.00%)  	  __x += __detail::__mod<_UIntType, __n>(__i);
 17,444 ( 0.02%)  => /usr/include/c++/14.2.1/bits/random.h:unsigned long std::__detail::__mod<unsigned long, 624ul, 1ul, 0ul>(unsigned long) (623x)
  1,869 ( 0.00%)  	  _M_x[__i] = __detail::__mod<_UIntType,
  1,869 ( 0.00%)  	    __detail::_Shift<_UIntType, __w>::__value>(__x);
 11,837 ( 0.01%)  => /usr/include/c++/14.2.1/bits/random.h:unsigned long std::__detail::__mod<unsigned long, 4294967296ul, 1ul, 0ul>(unsigned long) (623x)
      .           	}
      2 ( 0.00%)        _M_p = state_size;
      3 ( 0.00%)      }
      .           
      .             template<typename _UIntType,
      .           	   size_t __w, size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f>
      .               template<typename _Sseq>
      .                 auto
-- line 351 ----------------------------------------
-- line 389 ----------------------------------------
      .                 }
      .           
      .             template<typename _UIntType, size_t __w,
      .           	   size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f>
      .               void
     99 ( 0.00%)      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
      .           			    __s, __b, __t, __c, __l, __f>::
      .               _M_gen_rand(void)
      .               {
     33 ( 0.00%)        const _UIntType __upper_mask = (~_UIntType()) << __r;
     33 ( 0.00%)        const _UIntType __lower_mask = ~__upper_mask;
      .           
 22,605 ( 0.03%)        for (size_t __k = 0; __k < (__n - __m); ++__k)
      .                   {
 52,437 ( 0.06%)  	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 37,455 ( 0.04%)  			   | (_M_x[__k + 1] & __lower_mask));
 74,910 ( 0.08%)  	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
 56,183 ( 0.06%)  		       ^ ((__y & 0x01) ? __a : 0));
      .                   }
      .           
 39,336 ( 0.04%)        for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
      .           	{
 91,476 ( 0.10%)  	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 65,340 ( 0.07%)  			   | (_M_x[__k + 1] & __lower_mask));
130,680 ( 0.15%)  	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
 98,007 ( 0.11%)  		       ^ ((__y & 0x01) ? __a : 0));
      .           	}
      .           
    198 ( 0.00%)        _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
     99 ( 0.00%)  		       | (_M_x[0] & __lower_mask));
    231 ( 0.00%)        _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
    221 ( 0.00%)  		       ^ ((__y & 0x01) ? __a : 0));
     66 ( 0.00%)        _M_p = 0;
     99 ( 0.00%)      }
      .           
      .             template<typename _UIntType, size_t __w,
      .           	   size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f>
      .               void
      .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
-- line 433 ----------------------------------------
-- line 445 ----------------------------------------
      .             template<typename _UIntType, size_t __w,
      .           	   size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f>
      .               typename
      .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
      .           			    __s, __b, __t, __c, __l, __f>::result_type
 80,872 ( 0.09%)      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
      .           			    __s, __b, __t, __c, __l, __f>::
      .               operator()()
      .               {
      .                 // Reload the vector - cost is O(n) amortized over n calls.
 80,872 ( 0.09%)        if (_M_p >= state_size)
     99 ( 0.00%)  	_M_gen_rand();
669,508 ( 0.76%)  => /usr/include/c++/14.2.1/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand() (33x)
      .           
      .                 // Calculate o(x(i)).
161,744 ( 0.18%)        result_type __z = _M_x[_M_p++];
 80,872 ( 0.09%)        __z ^= (__z >> __u) & __d;
 80,872 ( 0.09%)        __z ^= (__z << __s) & __b;
 80,872 ( 0.09%)        __z ^= (__z << __t) & __c;
 60,654 ( 0.07%)        __z ^= (__z >> __l);
      .           
 20,218 ( 0.02%)        return __z;
 40,436 ( 0.05%)      }
      .           
      .             template<typename _UIntType, size_t __w,
      .           	   size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f, typename _CharT, typename _Traits>
      .               std::basic_ostream<_CharT, _Traits>&
      .               operator<<(std::basic_ostream<_CharT, _Traits>& __os,
-- line 477 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_ios.h
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/char_traits.h
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ios_base.h
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/locale_facets.h
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/locale_facets.tcc
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream_insert.h
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/stl_algobase.h
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/streambuf_iterator.h
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ext/stdio_sync_filebuf.h
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream
  /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/streambuf
  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_op.cc
  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc
  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc
  /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/hashtable_c++0x.cc
  /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++98/locale.cc
  /usr/src/debug/glibc/glibc/elf/../sysdeps/generic/dl-new-hash.h
  /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-machine.h
  /usr/src/debug/glibc/glibc/elf/dl-lookup.c
  /usr/src/debug/glibc/glibc/elf/dl-reloc.c
  /usr/src/debug/glibc/glibc/elf/do-rel.h
  /usr/src/debug/glibc/glibc/io/../sysdeps/unix/sysv/linux/write.c
  /usr/src/debug/glibc/glibc/libio/fileops.c
  /usr/src/debug/glibc/glibc/libio/genops.c
  /usr/src/debug/glibc/glibc/libio/iofflush.c
  /usr/src/debug/glibc/glibc/libio/iofwrite.c
  /usr/src/debug/glibc/glibc/libio/libioP.h
  /usr/src/debug/glibc/glibc/libio/putc.c
  /usr/src/debug/glibc/glibc/malloc/arena.c
  /usr/src/debug/glibc/glibc/malloc/malloc.c
  /usr/src/debug/glibc/glibc/string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S
  /usr/src/debug/glibc/glibc/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  /usr/src/debug/glibc/glibc/string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  /usr/src/debug/glibc/glibc/string/../sysdeps/x86_64/multiarch/strlen-avx2.S

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
47,376,876 (53.51%)  events annotated

